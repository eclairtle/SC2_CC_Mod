include "TriggerLibs/NativeLib"
include "TriggerLibs/VoidLib"

include "Lib966DE777_h"

//--------------------------------------------------------------------------------------------------
// Library: Contingency Contracts
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib966DE777_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib966DE777_InitVariables_completed = false;

void lib966DE777_InitVariables () {
    int init_i;
    int init_j;

    if (lib966DE777_InitVariables_completed) {
        return;
    }

    lib966DE777_InitVariables_completed = true;

    lib966DE777_gv_cCMissionCount = 99;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib966DE777_gv_cC_Enemy_Has_AI[init_i] = true;
    }
    lib966DE777_gv_cCAllowLightingChange = true;
    lib966DE777_gv_fUNDS_PER_LEVEL = 20000;
    lib966DE777_gv_cCRewardPool = 200000;
    lib966DE777_gv_cCRewardPoolProtoss = 3;
    lib966DE777_gv_cCRewardPoolZerg = 3;
    lib966DE777_gv_cCFundAvailable = 300000;
    lib966DE777_gv_cCPlayerSide = PlayerGroupSingle(1);
    lib966DE777_gv_cCPlayerSideExclusive = PlayerGroupSingle(1);
    lib966DE777_gv_cCEnemySide = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    lib966DE777_gv_cCPrimaryEnemy = 2;
    lib966DE777_gv_cCEnemyWaveMultiplier = 1.0;
    lib966DE777_gv_randomizecostupperbound = 1.3;
    lib966DE777_gv_randomizecostlowerbound = 0.7;
    lib966DE777_gv_reqCategoryCount = 99;
    lib966DE777_gv_reqTypeCount = 99;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lib966DE777_gv_productionExemptCategory[init_i] = -1;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib966DE777_gv_cCTopbarPanel[init_i] = c_invalidDialogControlId;
    }
    lib966DE777_gv_spawnedPickups = UnitGroupEmpty();
    lib966DE777_gv_spawnPickupLimit = 100;
    lib966DE777_gv_resourceDrainTimer = TimerCreate();
    lib966DE777_gv_resourceDrainTimerWindow = c_timerWindowNone;
    lib966DE777_gv_resourceDrainInterval = 90;
    lib966DE777_gv_mineralDrain = 900;
    lib966DE777_gv_vespeneDrain = 450;
    lib966DE777_gv_collapsalpickfundpool = 500.0;
    lib966DE777_gv_collapsals = UnitGroupEmpty();
    lib966DE777_gv_cCZergAssaultTimer = TimerCreate();
    lib966DE777_gv_cCClimateTimer = TimerCreate();
    lib966DE777_gv_cCClimateTimerWindow = c_timerWindowNone;
    lib966DE777_gv_ionCannonMaxCharge = 40;
    lib966DE777_gv_cCDefaultFilter = UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)));
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 80; init_j += 1) {
            lib966DE777_gv_cCContractBtn[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib966DE777_gv_cCStartBtn = c_invalidDialogControlId;
    lib966DE777_gv_cCDialogue = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lib966DE777_gv_cCClassBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib966DE777_gv_cCStatLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib966DE777_gv_cCOtherLabels[init_i] = c_invalidDialogControlId;
    }
    lib966DE777_gv_cCStartGameTxt = StringExternal("Param/Value/lib_966DE777_D153C586");
}

// Presets
// Functions
void lib966DE777_gf_InitializeResearchType (int lp_type) {
    // Variable Declarations
    int lv_researchtypeint;
    string lv_cciterate;

    // Automatic Variable Declarations
    int auto83F6507C_val;
    string autoA487F383_userType;
    int autoA487F383_i;

    // Variable Initialization
    lv_researchtypeint = 3;

    // Implementation
    lib966DE777_gv_cCResearchTypeInitialized = true;
    auto83F6507C_val = lp_type;
    if (auto83F6507C_val == lib966DE777_ge_CCResearchType_Protoss) {
        lv_researchtypeint = 1;
        UserDataSetInt("ContingencyContractClasses", "TossResearch", "Enabled", 1, 1);
        lib966DE777_gv_cCRewardPoolZerg = 0;
    }
    else if (auto83F6507C_val == lib966DE777_ge_CCResearchType_Zerg) {
        lv_researchtypeint = 2;
        UserDataSetInt("ContingencyContractClasses", "ZergResearch", "Enabled", 1, 1);
        lib966DE777_gv_cCRewardPoolProtoss = 0;
    }
    else if (auto83F6507C_val == lib966DE777_ge_CCResearchType_Both) {
        lv_researchtypeint = 1;
        UserDataSetInt("ContingencyContractClasses", "AllResearch", "Enabled", 1, 1);
    }
    else if (auto83F6507C_val == lib966DE777_ge_CCResearchType_None) {
        lib966DE777_gv_cCRewardPoolZerg = 0;
        lib966DE777_gv_cCRewardPoolProtoss = 0;
    }
    else {
    }
    autoA487F383_userType = "ContingencyContracts";
    autoA487F383_i = 1;
    for ( ; autoA487F383_i <= UserDataInstanceCount(autoA487F383_userType) ; autoA487F383_i += 1 ) {
        lv_cciterate = UserDataInstance(autoA487F383_userType, autoA487F383_i);
        if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Research Type", 1) == 3)) {
            UserDataSetInt("ContingencyContracts", lv_cciterate, "Research Type", 1, lv_researchtypeint);
        }

    }
}

void lib966DE777_gf_SetCCTechRestriction (bool lp_unlockAll, int lp_campaign) {
    // Variable Declarations
    string lv_instance;
    int lv_iterate;
    int lv_campaignID;

    // Automatic Variable Declarations
    int autoA25F2743_val;
    string auto18FA8C64_userType;
    int auto18FA8C64_i;
    const int auto68C70DBF_ae = 10;
    const int auto68C70DBF_ai = 1;

    // Variable Initialization

    // Implementation
    autoA25F2743_val = lp_campaign;
    if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_None) {
        lv_campaignID = 0;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_WoL) {
        lv_campaignID = 1;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_HotS) {
        lv_campaignID = 2;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_LotV) {
        lv_campaignID = 3;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_NCO) {
        lv_campaignID = 4;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_WoLZeratul) {
        lv_campaignID = 5;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_LotVPrologue) {
        lv_campaignID = 6;
    }
    else if (autoA25F2743_val == lib966DE777_ge_CCCampaignIndex_Epilogue) {
        lv_campaignID = 7;
    }
    else {
    }
    auto18FA8C64_userType = "CCTechRestrictions";
    auto18FA8C64_i = 1;
    for ( ; auto18FA8C64_i <= UserDataInstanceCount(auto18FA8C64_userType) ; auto18FA8C64_i += 1 ) {
        lv_instance = UserDataInstance(auto18FA8C64_userType, auto18FA8C64_i);
        if ((lib966DE777_gf_CheckCCTechRequirement(lv_instance, lv_campaignID, 99) == false)) {
            lv_iterate = 1;
            for ( ; ( (auto68C70DBF_ai >= 0 && lv_iterate <= auto68C70DBF_ae) || (auto68C70DBF_ai < 0 && lv_iterate >= auto68C70DBF_ae) ) ; lv_iterate += auto68C70DBF_ai ) {
                lib966DE777_gf_ModifyCCData(UserDataGetUserInstance("CCTechRestrictions", lv_instance, "Contract", lv_iterate), 99, 0);
            }
        }

    }
}

bool lib966DE777_gf_CheckCCTechRequirement (string lp_instance, int lp_campaignID, int lp_missionCount) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("CCTechRestrictions", lp_instance, "Flags", 1) == 1)) {
        return false;
    }

    if (((UserDataGetInt("CCTechRestrictions", lp_instance, "Campaign ID", 1) == lp_campaignID) || (UserDataGetInt("CCTechRestrictions", lp_instance, "Campaign ID", 1) == -1))) {
        if ((UserDataGetInt("CCTechRestrictions", lp_instance, "MissionCount", 1) > lp_missionCount)) {
            return false;
        }

        if ((TechTreeUnitIsAllowed(PlayerGroupPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), 1), UserDataGetUnit("CCTechRestrictions", lp_instance, "Unit", 1)) == false) && (UserDataGetUnit("CCTechRestrictions", lp_instance, "Unit", 1) != null) && (UserDataGetUnit("CCTechRestrictions", lp_instance, "Unit", 1) != "")) {
            return false;
        }

        if ((TechTreeUpgradeCount(PlayerGroupPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), 1), UserDataGetUpgrade("CCTechRestrictions", lp_instance, "Upgrade", 1), c_techCountQueuedOrBetter) == 0) && (UserDataGetUpgrade("CCTechRestrictions", lp_instance, "Upgrade", 1) != null) && (UserDataGetUpgrade("CCTechRestrictions", lp_instance, "Upgrade", 1) != "")) {
            return false;
        }

        if ((TechTreeAbilityIsAllowed(PlayerGroupPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), 1), UserDataGetAbilCmd("CCTechRestrictions", lp_instance, "Ability Command", 1)) == false) && (UserDataGetAbilCmd("CCTechRestrictions", lp_instance, "Ability Command", 1) != null)) {
            return false;
        }

    }

    return true;
}

void lib966DE777_gf_ContingencyContractMasterInit (int lp_campaign, int lp_researchType, int lp_minRisk, int lp_maxRewardRisk, int lp_maxResearchReward, int lp_credits, int lp_bonusNodes) {
    // Automatic Variable Declarations
    // Implementation
    lib966DE777_gf_InitializeResearchType(lp_researchType);
    lib966DE777_gf_SetCCTechRestriction(false, lp_campaign);
    lib966DE777_gv_cCRewardPool = (lp_maxRewardRisk * lib966DE777_gv_fUNDS_PER_LEVEL);
    lib966DE777_gv_cCMinContingencyLevel = lp_minRisk;
    lib966DE777_gv_cCRewardPoolProtoss = lp_maxResearchReward;
    lib966DE777_gv_cCRewardPoolProtoss = lp_maxResearchReward;
    if ((GameIsTestMap(false) == false) && (GameIsTestMap(false) == false)) {
        lib966DE777_gv_cCFundAvailable = lp_credits;
    }
    else {
        lib966DE777_gv_cCFundAvailable = 300000;
    }
    lib966DE777_gv_cCPlayerSide = PlayerGroupSingle(1);
    lib966DE777_gv_cCPlayerSideExclusive = PlayerGroupSingle(1);
    lib966DE777_gv_cCEnemySide = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    TriggerExecute(lib966DE777_gt_InitializeCCMenu, true, false);
}

int lib966DE777_gf_GetCCCreditReward () {
    // Variable Declarations
    int lv_baseReward;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_baseReward = MinI(lib966DE777_gv_cCRewardPool, lib966DE777_gv_cCRewardFund);

    // Implementation
    return (lv_baseReward - lib966DE777_gv_cCExpendFund);
}

int lib966DE777_gf_GetCCResearchReward (int lp_researchType) {
    // Automatic Variable Declarations
    int auto4C99E8C5_val;

    // Implementation
    if ((TechTreeUpgradeCount(1, "CCAllBonusObjectivesComplete", c_techCountQueuedOrBetter) >= 1)) {
        auto4C99E8C5_val = lp_researchType;
        if (auto4C99E8C5_val == lib966DE777_ge_CCResearchType_Protoss) {
            return lib966DE777_gv_cCRewardProtoss;
        }
        else if (auto4C99E8C5_val == lib966DE777_ge_CCResearchType_Zerg) {
            return lib966DE777_gv_cCRewardZerg;
        }
        else {
        }
    }

    return 0;
}

playergroup lib966DE777_gf_GetCCTargetPlayerGroup (int lp_enemyorPlayer) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;

    // Automatic Variable Declarations
    int autoB3F111D7_val;

    // Variable Initialization

    // Implementation
    autoB3F111D7_val = lp_enemyorPlayer;
    if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_Player) {
        lv_targetPlayerGroup = lib966DE777_gv_cCPlayerSide;
    }
    else if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive) {
        lv_targetPlayerGroup = lib966DE777_gv_cCPlayerSideExclusive;
    }
    else if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_Enemy) {
        lv_targetPlayerGroup = lib966DE777_gv_cCEnemySide;
    }
    else if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_EnemyExclusive) {
        lv_targetPlayerGroup = libNtve_gf_IntersectionOfPlayerGroups(PlayerGroupAlliance(c_playerGroupEnemy, 1), lib966DE777_gv_cCEnemySide);
    }
    else if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_Both) {
        lv_targetPlayerGroup = libNtve_gf_UnionOfPlayerGroups(lib966DE777_gv_cCPlayerSide, lib966DE777_gv_cCEnemySide);
    }
    else if (autoB3F111D7_val == lib966DE777_ge_CCforEnemyorPlayer_All) {
        lv_targetPlayerGroup = PlayerGroupAll();
    }
    else {
    }
    return lv_targetPlayerGroup;
}

bool lib966DE777_gf_CCUnitinUnitTypeList (string lp_unitType, string lp_instance) {
    // Variable Declarations
    int lv_iterate;

    // Automatic Variable Declarations
    const int auto0E8D6F35_ae = 15;
    const int auto0E8D6F35_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iterate = 1;
    for ( ; ( (auto0E8D6F35_ai >= 0 && lv_iterate <= auto0E8D6F35_ae) || (auto0E8D6F35_ai < 0 && lv_iterate >= auto0E8D6F35_ae) ) ; lv_iterate += auto0E8D6F35_ai ) {
        if (((UserDataGetUnit("CCSameUnitTypeList", lp_instance, "Units", lv_iterate) == null) || (UserDataGetUnit("CCSameUnitTypeList", lp_instance, "Units", lv_iterate) == ""))) {
            break;
        }

        if ((UserDataGetUnit("CCSameUnitTypeList", lp_instance, "Units", lv_iterate) == lp_unitType)) {
            return true;
        }

    }
    return false;
}

bool lib966DE777_gf_CCUnitisCategory (string lp_unitType, string lp_category) {
    // Variable Declarations
    int lv_iterate;

    // Automatic Variable Declarations
    const int autoCA173D14_ae = 30;
    const int autoCA173D14_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iterate = 1;
    for ( ; ( (autoCA173D14_ai >= 0 && lv_iterate <= autoCA173D14_ae) || (autoCA173D14_ai < 0 && lv_iterate >= autoCA173D14_ae) ) ; lv_iterate += autoCA173D14_ai ) {
        if (((UserDataGetUnit("CCUnitCategories", lp_category, "Units", lv_iterate) == null) || (UserDataGetUnit("CCUnitCategories", lp_category, "Units", lv_iterate) == ""))) {
            break;
        }

        if ((UserDataGetUnit("CCUnitCategories", lp_category, "Units", lv_iterate) == lp_unitType)) {
            return true;
        }

    }
    return false;
}

trigger auto_lib966DE777_gf_CCRemoveBullies_Trigger = null;
unitgroup auto_lib966DE777_gf_CCRemoveBullies_lp_units;

void lib966DE777_gf_CCRemoveBullies (unitgroup lp_units) {
    auto_lib966DE777_gf_CCRemoveBullies_lp_units = lp_units;

    if (auto_lib966DE777_gf_CCRemoveBullies_Trigger == null) {
        auto_lib966DE777_gf_CCRemoveBullies_Trigger = TriggerCreate("auto_lib966DE777_gf_CCRemoveBullies_TriggerFunc");
    }

    TriggerExecute(auto_lib966DE777_gf_CCRemoveBullies_Trigger, false, false);
}

bool auto_lib966DE777_gf_CCRemoveBullies_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_units = auto_lib966DE777_gf_CCRemoveBullies_lp_units;

    // Automatic Variable Declarations
    unitgroup auto224A9A36_g;
    int auto224A9A36_u;
    unit auto224A9A36_var;
    unitgroup auto5953E40A_g;
    int auto5953E40A_u;
    unit auto5953E40A_var;

    // Implementation
    auto224A9A36_g = lp_units;
    auto224A9A36_u = UnitGroupCount(auto224A9A36_g, c_unitCountAll);
    for (;; auto224A9A36_u -= 1) {
        auto224A9A36_var = UnitGroupUnitFromEnd(auto224A9A36_g, auto224A9A36_u);
        if (auto224A9A36_var == null) { break; }
        AIToggleBulliesInRegion(UnitGetOwner(auto224A9A36_var), RegionCircle(UnitGetPosition(auto224A9A36_var), 0.5), false);
    }
    Wait(0.0625, c_timeGame);
    auto5953E40A_g = lp_units;
    auto5953E40A_u = UnitGroupCount(auto5953E40A_g, c_unitCountAll);
    for (;; auto5953E40A_u -= 1) {
        auto5953E40A_var = UnitGroupUnitFromEnd(auto5953E40A_g, auto5953E40A_u);
        if (auto5953E40A_var == null) { break; }
        UnitRemove(auto5953E40A_var);
    }
    return true;
}

trigger auto_lib966DE777_gf_CCFactionSwapUnit_Trigger = null;
unit auto_lib966DE777_gf_CCFactionSwapUnit_lp_targetUnit;
int auto_lib966DE777_gf_CCFactionSwapUnit_lp_factionIndex;

void lib966DE777_gf_CCFactionSwapUnit (unit lp_targetUnit, int lp_factionIndex) {
    auto_lib966DE777_gf_CCFactionSwapUnit_lp_targetUnit = lp_targetUnit;
    auto_lib966DE777_gf_CCFactionSwapUnit_lp_factionIndex = lp_factionIndex;

    if (auto_lib966DE777_gf_CCFactionSwapUnit_Trigger == null) {
        auto_lib966DE777_gf_CCFactionSwapUnit_Trigger = TriggerCreate("auto_lib966DE777_gf_CCFactionSwapUnit_TriggerFunc");
    }

    TriggerExecute(auto_lib966DE777_gf_CCFactionSwapUnit_Trigger, false, false);
}

bool auto_lib966DE777_gf_CCFactionSwapUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_lib966DE777_gf_CCFactionSwapUnit_lp_targetUnit;
    int lp_factionIndex = auto_lib966DE777_gf_CCFactionSwapUnit_lp_factionIndex;

    // Variable Declarations
    int lv_tierIndex;
    int lv_specialFlag;
    string lv_replacementUnit;
    string lv_unitMapping;
    string lv_structureMapping;

    // Automatic Variable Declarations
    string auto156C82F1_userType;
    int auto156C82F1_i;
    string auto27581C20_userType;
    int auto27581C20_i;
    string auto3D94B367_val;
    int autoE368B03D_val;
    unitgroup autoAAE26630_g;
    int autoAAE26630_u;
    unit autoAAE26630_var;

    // Variable Initialization

    // Implementation
    if ((UnitFilterMatch(lp_targetUnit, UnitGetOwner(lp_targetUnit), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
        lv_tierIndex = lib966DE777_gf_GetStructureTierIndex(UnitGetType(lp_targetUnit));
    }
    else {
        lv_tierIndex = lib966DE777_gf_GetUnitTierIndex(UnitGetType(lp_targetUnit));
    }
    if ((lv_tierIndex != 0)) {
        if ((UnitFilterMatch(lp_targetUnit, UnitGetOwner(lp_targetUnit), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            auto27581C20_userType = "CCFactionStructureMappings";
            auto27581C20_i = 1;
            for ( ; auto27581C20_i <= UserDataInstanceCount(auto27581C20_userType) ; auto27581C20_i += 1 ) {
                lv_structureMapping = UserDataInstance(auto27581C20_userType, auto27581C20_i);
                if ((lp_factionIndex == UserDataGetInt("CCFactionStructureMappings", lv_structureMapping, "Faction Index", 1))) {
                    lv_replacementUnit = UserDataGetUnit("CCFactionStructureMappings", lv_structureMapping, "Units", lv_tierIndex);
                    lv_specialFlag = UserDataGetInt("CCFactionStructureMappings", lv_structureMapping, "SpecialFlag", lv_tierIndex);
                    break;
                }

            }
        }
        else {
            auto156C82F1_userType = "CCFactionUnitMappings";
            auto156C82F1_i = 1;
            for ( ; auto156C82F1_i <= UserDataInstanceCount(auto156C82F1_userType) ; auto156C82F1_i += 1 ) {
                lv_unitMapping = UserDataInstance(auto156C82F1_userType, auto156C82F1_i);
                if ((lp_factionIndex == UserDataGetInt("CCFactionUnitMappings", lv_unitMapping, "Faction Index", 1))) {
                    lv_replacementUnit = UserDataGetUnit("CCFactionUnitMappings", lv_unitMapping, "Units", lv_tierIndex);
                    lv_specialFlag = UserDataGetInt("CCFactionUnitMappings", lv_unitMapping, "Special Flag", lv_tierIndex);
                    break;
                }

            }
        }
    }

    auto3D94B367_val = lv_replacementUnit;
    if (auto3D94B367_val == null) {

    }
    else if (auto3D94B367_val == "") {

    }
    else {
        libNtve_gf_ReplaceUnit(lp_targetUnit, lv_replacementUnit, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    }
    lp_targetUnit = libNtve_gf_LastReplacedUnit();
    UnitBehaviorAdd(lp_targetUnit, "CCAlreadyFragilized", lp_targetUnit, 1);
    autoE368B03D_val = lv_specialFlag;
    if (autoE368B03D_val == 1) {
        UnitBehaviorAdd(lp_targetUnit, "QueenSpawnLarva", lp_targetUnit, 3);
        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, 1, UnitGetPosition(lp_targetUnit));
    }
    else if (autoE368B03D_val == 2) {
        libNtve_gf_CreateUnitsAtPoint2(1, lv_replacementUnit, 0, 1, UnitGetPosition(lp_targetUnit));
    }
    else if (autoE368B03D_val == 3) {
        libNtve_gf_CreateUnitsAtPoint2(2, lv_replacementUnit, 0, 1, UnitGetPosition(lp_targetUnit));
    }
    else if (autoE368B03D_val == 4) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, 1, UnitGetPosition(lp_targetUnit));
    }
    else if (autoE368B03D_val == 5) {
        CreepModify(UnitGetPosition(lp_targetUnit), 15.0, false, false);
        autoAAE26630_g = UnitGroup("Overlord", UnitGetOwner(lp_targetUnit), RegionCircle(UnitGetPosition(lp_targetUnit), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        autoAAE26630_u = UnitGroupCount(autoAAE26630_g, c_unitCountAll);
        for (;; autoAAE26630_u -= 1) {
            autoAAE26630_var = UnitGroupUnitFromEnd(autoAAE26630_g, autoAAE26630_u);
            if (autoAAE26630_var == null) { break; }
            UnitRemove(autoAAE26630_var);
        }
    }
    else {
    }
    return true;
}

void lib966DE777_gf_CCFactionSwapPlayerStart () {
    // Automatic Variable Declarations
    playergroup autoB571F5DD_g;
    int autoB571F5DD_var;
    unitgroup autoA7DED9A9_g;
    int autoA7DED9A9_u;
    unit autoA7DED9A9_var;

    // Implementation
    if ((lib966DE777_gf_CheckCCState("FactionMengsk", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCPlayerFactionIndex = 6;
        if ((lib966DE777_gf_CheckCCState("MengskTopbar", lib966DE777_ge_CCCheckState_On) == true)) {
        }

    }

    if ((lib966DE777_gv_cCPlayerFactionIndex != 0)) {
        autoB571F5DD_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
        autoB571F5DD_var = -1;
        while (true) {
            autoB571F5DD_var = PlayerGroupNextPlayer(autoB571F5DD_g, autoB571F5DD_var);
            if (autoB571F5DD_var < 0) { break; }
            autoA7DED9A9_g = UnitGroup(null, autoB571F5DD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoA7DED9A9_u = UnitGroupCount(autoA7DED9A9_g, c_unitCountAll);
            for (;; autoA7DED9A9_u -= 1) {
                autoA7DED9A9_var = UnitGroupUnitFromEnd(autoA7DED9A9_g, autoA7DED9A9_u);
                if (autoA7DED9A9_var == null) { break; }
                UnitBehaviorAdd(autoA7DED9A9_var, "CCFactionSwapPlayerUnit", autoA7DED9A9_var, 1);
            }
        }
    }

}

string lib966DE777_gf_CCEnemyFactionSwapUnitType (string lp_sourceUnitType) {
    // Variable Declarations
    string lv_outputUnitType;
    string lv_mappingInstance;
    int lv_iterate;

    // Automatic Variable Declarations
    string autoAA7F8441_userType;
    int autoAA7F8441_i;
    const int auto2B8748BE_ae = 10;
    const int auto2B8748BE_ai = 1;

    // Variable Initialization
    lv_outputUnitType = lp_sourceUnitType;

    // Implementation
    autoAA7F8441_userType = "CCEnemyFactionUnitMappings";
    autoAA7F8441_i = 1;
    for ( ; autoAA7F8441_i <= UserDataInstanceCount(autoAA7F8441_userType) ; autoAA7F8441_i += 1 ) {
        lv_mappingInstance = UserDataInstance(autoAA7F8441_userType, autoAA7F8441_i);
        if ((UserDataGetUnit("CCEnemyFactionUnitMappings", lv_mappingInstance, "Source Unit", 1) == lp_sourceUnitType)) {
            lv_iterate = 1;
            for ( ; ( (auto2B8748BE_ai >= 0 && lv_iterate <= auto2B8748BE_ae) || (auto2B8748BE_ai < 0 && lv_iterate >= auto2B8748BE_ae) ) ; lv_iterate += auto2B8748BE_ai ) {
                if ((UserDataGetUnit("CCEnemyFactionUnitMappings", lv_mappingInstance, "Target Unit", lv_iterate) != null) && (UserDataGetUnit("CCEnemyFactionUnitMappings", lv_mappingInstance, "Target Unit", lv_iterate) != "") && (lib966DE777_gf_CheckCCState(UserDataGetUserInstance("CCEnemyFactionUnitMappings", lv_mappingInstance, "Require Contract", lv_iterate), lib966DE777_ge_CCCheckState_On) == true)) {
                    lv_outputUnitType = UserDataGetUnit("CCEnemyFactionUnitMappings", lv_mappingInstance, "Target Unit", lv_iterate);
                    break;
                }

            }
        }

    }
    return lv_outputUnitType;
}

int lib966DE777_gf_GetUnitTierIndex (string lp_targetUnitType) {
    // Variable Declarations
    string lv_tierData;

    // Automatic Variable Declarations
    string autoF77C1F8D_userType;
    int autoF77C1F8D_i;
    const int auto5343642F_ae = 25;
    int auto5343642F_var;

    // Variable Initialization

    // Implementation
    autoF77C1F8D_userType = "CCUnitTierMappings";
    autoF77C1F8D_i = 1;
    for ( ; autoF77C1F8D_i <= UserDataInstanceCount(autoF77C1F8D_userType) ; autoF77C1F8D_i += 1 ) {
        lv_tierData = UserDataInstance(autoF77C1F8D_userType, autoF77C1F8D_i);
        auto5343642F_var = 1;
        for ( ; auto5343642F_var <= auto5343642F_ae; auto5343642F_var += 1 ) {
            if ((lp_targetUnitType == UserDataGetUnit("CCUnitTierMappings", lv_tierData, "Unit", auto5343642F_var))) {
                return UserDataGetInt("CCUnitTierMappings", lv_tierData, "Index", 1);
            }

        }
    }
    return 0;
}

int lib966DE777_gf_GetStructureTierIndex (string lp_targetUnitType) {
    // Variable Declarations
    string lv_tierData;

    // Automatic Variable Declarations
    string auto3C3E7D41_userType;
    int auto3C3E7D41_i;
    const int auto942ADE27_ae = 15;
    int auto942ADE27_var;

    // Variable Initialization

    // Implementation
    auto3C3E7D41_userType = "CCStructureTierMappings";
    auto3C3E7D41_i = 1;
    for ( ; auto3C3E7D41_i <= UserDataInstanceCount(auto3C3E7D41_userType) ; auto3C3E7D41_i += 1 ) {
        lv_tierData = UserDataInstance(auto3C3E7D41_userType, auto3C3E7D41_i);
        auto942ADE27_var = 1;
        for ( ; auto942ADE27_var <= auto942ADE27_ae; auto942ADE27_var += 1 ) {
            if ((lp_targetUnitType == UserDataGetUnit("CCStructureTierMappings", lv_tierData, "Unit", auto942ADE27_var))) {
                return UserDataGetInt("CCStructureTierMappings", lv_tierData, "Index", 1);
            }

        }
    }
    return 0;
}

void lib966DE777_gf_CCdebugmessage (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gv_ccdebug == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lp_message);
    }

}

void lib966DE777_gf_CCSetAttackWaveMultipliers () {
    // Automatic Variable Declarations
    // Implementation
    lib966DE777_gv_cCEnemyWaveMultiplier = 1.0;
    if ((lib966DE777_gf_CheckCCState("EnemyWave 2", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCEnemyWaveMultiplier += 0.5;
    }

    if ((lib966DE777_gf_CheckCCState("EnemyWave 3", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCEnemyWaveMultiplier += 0.75;
    }

}

void lib966DE777_gf_AIAdvancedWaveTARGET (int lp_wavePlayerOwner, int lp_wavePlayerVictim, point lp_waveGatherPoint, bool lp_useAttackPoint, point lp_waveAttackPoint) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(lp_wavePlayerOwner, lp_waveGatherPoint);
    AIAttackWaveSetTargetPlayer(lp_wavePlayerOwner, PlayerGroupSingle(lp_wavePlayerVictim));
    if ((lp_useAttackPoint == true)) {
        AIAttackWaveSetTargetPoint(lp_wavePlayerOwner, lp_waveAttackPoint);
    }

}

void lib966DE777_gf_CCAttackWaveADDUNITS (int lp_player, int lp_easyUnitBaseCount, int lp_mediumUnitBaseCount, int lp_hardUnitBaseCount, int lp_brutalUnitBaseCount, string lp_unitType, bool lp_locked) {
    // Variable Declarations
    int lv_resultCount;
    string lv_resultUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resultCount = libNtve_gf_DifficultyValueInt(lp_easyUnitBaseCount, lp_mediumUnitBaseCount, lp_hardUnitBaseCount, lp_brutalUnitBaseCount);
    lv_resultUnitType = lp_unitType;

    // Implementation
    if ((PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_Enemy), lp_player) == true) && (lp_locked == false)) {
        lv_resultCount = FixedToInt((IntToFixed(lv_resultCount) * lib966DE777_gv_cCEnemyWaveMultiplier));
        lv_resultUnitType = lib966DE777_gf_CCEnemyFactionSwapUnitType(lv_resultUnitType);
    }

    AIAttackWaveAddUnits4(lv_resultCount, lv_resultCount, lv_resultCount, lv_resultCount, lv_resultUnitType);
}

void lib966DE777_gf_CCAttackWaveLAUNCH (int lp_wavePlayerOwner, int lp_waveTimerBase, string lp_extraUnitType, int lp_extraUnitMaxAmount, bool lp_wait) {
    // Variable Declarations
    int lv_randomTimerOffset;
    int lv_resultTimer;
    int lv_extraAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resultTimer = lp_waveTimerBase;

    // Implementation
    if ((lib966DE777_gf_CheckCCState("NightmareWave", lib966DE777_ge_CCCheckState_On) == true)) {
        lv_randomTimerOffset = RandomInt(-90, 90);
        lv_extraAmount = RoundI((((lv_randomTimerOffset + 90) / 180) * lp_extraUnitMaxAmount));
        lib966DE777_gf_CCAttackWaveADDUNITS(lib966DE777_gv_cCPrimaryEnemy, 0, 0, lv_extraAmount, lv_extraAmount, lp_extraUnitType, false);
    }

    lv_resultTimer = (lv_resultTimer + lv_randomTimerOffset);
    AIAttackWaveSend(lp_wavePlayerOwner, lv_resultTimer, lp_wait);
}

void lib966DE777_gf_CCAttackWaveSPAWN (int lp_spawnOwner, point lp_spawnLocationPoint, point lp_spawnAttackPoint, int lp_easyUnitBaseCount, int lp_mediumUnitBaseCount, int lp_hardUnitBaseCount, int lp_brutalUnitBaseCount, string lp_unitType) {
    // Variable Declarations
    int lv_resultCount;
    string lv_resultUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_resultCount = libNtve_gf_DifficultyValueInt(lp_easyUnitBaseCount, lp_mediumUnitBaseCount, lp_hardUnitBaseCount, lp_brutalUnitBaseCount);
    lv_resultUnitType = lp_unitType;

    // Implementation
    if ((PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_Enemy), lp_spawnOwner) == true)) {
        lv_resultCount = FixedToInt((IntToFixed(lv_resultCount) * lib966DE777_gv_cCEnemyWaveMultiplier));
        lv_resultUnitType = lib966DE777_gf_CCEnemyFactionSwapUnitType(lv_resultUnitType);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(lv_resultCount, lv_resultUnitType, 0, lp_spawnOwner, lp_spawnLocationPoint);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_spawnAttackPoint), c_orderQueueReplace);
    AISetGroupSuicide(UnitLastCreatedGroup(), true);
}

void lib966DE777_gf_SendBonusObjectivesCompletionEvent () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent("AllBonusObjectivesComplete");
}

void lib966DE777_gf_SendBonusObjectiveNodeEvent () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent("BonusObjectiveNodeComplete");
    lib966DE777_gv_cCBonusObjectivesCompleted += 1;
    if ((lib966DE777_gv_cCBonusObjectivesCompleted >= lib966DE777_gv_cCBonusObjectivesTotal)) {
        lib966DE777_gf_SendBonusObjectivesCompletionEvent();
    }

}

void lib966DE777_gf_AllBonusObjectivesComplete (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "AllBonusObjectivesComplete");
}

void lib966DE777_gf_BonusObjectiveNodeComplete (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "BonusObjectiveNodeComplete");
}

unit lib966DE777_gf_RandomizerReplaceUnitGround (int lp_tier, unit lp_targetUnit, bool lp_playReadySound) {
    // Variable Declarations
    string lv_listiterate;
    int lv_unitcount;
    int lv_randomnumber;
    string lv_resultunittype;
    string lv_readysound;
    unit lv_returnunit;
    order lv_order;

    // Automatic Variable Declarations
    string auto4F1851F4_userType;
    int auto4F1851F4_i;

    // Variable Initialization
    lv_returnunit = lp_targetUnit;
    lv_order = UnitOrder(lp_targetUnit, 0);

    // Implementation
    auto4F1851F4_userType = "CCRandomizerGroundUnits";
    auto4F1851F4_i = 1;
    for ( ; auto4F1851F4_i <= UserDataInstanceCount(auto4F1851F4_userType) ; auto4F1851F4_i += 1 ) {
        lv_listiterate = UserDataInstance(auto4F1851F4_userType, auto4F1851F4_i);
        if ((UserDataGetInt("CCRandomizerGroundUnits", lv_listiterate, "Tier", 1) == lp_tier)) {
            lv_unitcount = UserDataGetInt("CCRandomizerGroundUnits", lv_listiterate, "Unit count", 1);
            lv_randomnumber = RandomInt(1, lv_unitcount);
            lv_resultunittype = UserDataGetUnit("CCRandomizerGroundUnits", lv_listiterate, "Units", lv_randomnumber);
            lv_readysound = UserDataGetSound("CCRandomizerGroundUnits", lv_listiterate, "Readysound", lv_randomnumber);
            break;
        }

    }
    if ((lv_resultunittype != null) && (lv_resultunittype != "")) {
        if ((lp_playReadySound == true) && (lv_readysound != null) && (lv_readysound != "")) {
            SoundPlayForPlayer(SoundLink(lv_readysound, c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(lp_targetUnit)), 100.0, 0.0);
        }

        libNtve_gf_ReplaceUnit(lp_targetUnit, lv_resultunittype, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        lv_returnunit = libNtve_gf_LastReplacedUnit();
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "CCNoSwap", libNtve_gf_LastReplacedUnit(), 1);
        UnitIssueOrder(libNtve_gf_LastReplacedUnit(), lv_order, c_orderQueueReplace);
    }

    return lv_returnunit;
}

unit lib966DE777_gf_RandomizerReplaceUnitAir (int lp_tier, unit lp_targetUnit, bool lp_playReadySound) {
    // Variable Declarations
    string lv_listiterate;
    int lv_unitcount;
    int lv_randomnumber;
    string lv_resultunittype;
    string lv_readysound;
    unit lv_returnunit;
    order lv_order;

    // Automatic Variable Declarations
    string auto0D4EC2D8_userType;
    int auto0D4EC2D8_i;

    // Variable Initialization
    lv_returnunit = lp_targetUnit;
    lv_order = UnitOrder(lp_targetUnit, 0);

    // Implementation
    auto0D4EC2D8_userType = "CCRandomizerAirUnits";
    auto0D4EC2D8_i = 1;
    for ( ; auto0D4EC2D8_i <= UserDataInstanceCount(auto0D4EC2D8_userType) ; auto0D4EC2D8_i += 1 ) {
        lv_listiterate = UserDataInstance(auto0D4EC2D8_userType, auto0D4EC2D8_i);
        if ((UserDataGetInt("CCRandomizerAirUnits", lv_listiterate, "Tier", 1) == lp_tier)) {
            lv_unitcount = UserDataGetInt("CCRandomizerAirUnits", lv_listiterate, "Unit count", 1);
            lv_randomnumber = RandomInt(1, lv_unitcount);
            lv_resultunittype = UserDataGetUnit("CCRandomizerAirUnits", lv_listiterate, "Units", lv_randomnumber);
            lv_readysound = UserDataGetSound("CCRandomizerAirUnits", lv_listiterate, "Readysound", lv_randomnumber);
            break;
        }

    }
    if ((lv_resultunittype != null) && (lv_resultunittype != "")) {
        if ((lp_playReadySound == true) && (lv_readysound != null) && (lv_readysound != "")) {
            SoundPlayForPlayer(SoundLink(lv_readysound, c_soundIndexAny), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(lp_targetUnit)), 100.0, 0.0);
        }

        libNtve_gf_ReplaceUnit(lp_targetUnit, lv_resultunittype, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        lv_returnunit = libNtve_gf_LastReplacedUnit();
        UnitBehaviorAdd(libNtve_gf_LastReplacedUnit(), "CCNoSwap", libNtve_gf_LastReplacedUnit(), 1);
        UnitIssueOrder(libNtve_gf_LastReplacedUnit(), lv_order, c_orderQueueReplace);
    }

    return lv_returnunit;
}

void lib966DE777_gf_CCApplyRandomizetoUnit (unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if (((RandomInt(1, 10) == 1) || (UnitFilterMatch(lp_target, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false))) {
        return ;
    }
    else {
        if ((UnitFilterMatch(lp_target, 1, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true)) {
            UnitBehaviorAdd(lp_target, "CCRandomgroundunitdummy", lp_target, 1);
        }
        else {
            UnitBehaviorAdd(lp_target, "CCRandomairunitdummy", lp_target, 1);
        }
    }
}

void lib966DE777_gf_CCRandomizerStart () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gf_CheckCCState("Randomizer 2", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCRandomizerActive = true;
    }

    if ((lib966DE777_gf_CheckCCState("Randomizerbad 3", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCRandomizerActive = true;
        lib966DE777_gv_randomizecostlowerbound = 0.6;
    }

    if ((lib966DE777_gf_CheckCCState("Randomizergood 2", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCRandomizerActive = true;
        lib966DE777_gv_randomizecostupperbound = 1.5;
    }

}

void lib966DE777_gf_CCBanallProductionExcept () {
    // Variable Declarations
    string lv_instance;
    int lv_iterate;
    int lv_iterate2;
    bool lv_ignore;

    // Automatic Variable Declarations
    string autoC3A7E460_userType;
    int autoC3A7E460_i;
    const int auto3E620F7A_ae = 4;
    const int auto3E620F7A_ai = 1;
    const int auto09C064DC_ae = 10;
    const int auto09C064DC_ai = 1;
    playergroup auto01DA7FCA_g;
    int auto01DA7FCA_var;
    playergroup autoC8631F79_g;
    int autoC8631F79_var;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_C68F207E"));
    if (((lib966DE777_gv_productionTypeCount >= lib966DE777_gv_reqTypeCount) || (lib966DE777_gv_reqTypeCount == 99))) {
        TriggerEnable(lib966DE777_gt_CCProductionBanActivate, false);
    }

    autoC3A7E460_userType = "CCTrainAbilityList";
    autoC3A7E460_i = 1;
    for ( ; autoC3A7E460_i <= UserDataInstanceCount(autoC3A7E460_userType) ; autoC3A7E460_i += 1 ) {
        lv_instance = UserDataInstance(autoC3A7E460_userType, autoC3A7E460_i);
        lv_ignore = false;
        lv_iterate2 = 0;
        for ( ; ( (auto3E620F7A_ai >= 0 && lv_iterate2 <= auto3E620F7A_ae) || (auto3E620F7A_ai < 0 && lv_iterate2 >= auto3E620F7A_ae) ) ; lv_iterate2 += auto3E620F7A_ai ) {
            if (((UserDataGetInt("CCTrainAbilityList", lv_instance, "Category Flag", 1) != lib966DE777_gv_productionExemptCategory[lv_iterate2]) || (lib966DE777_gv_reqCategoryCount == 99)) && ((lv_instance != lib966DE777_gv_productionExemptType[lv_iterate2]) || (lib966DE777_gv_reqTypeCount == 99))) {
            }
            else {
                lv_ignore = true;
                break;
            }
        }
        if ((lv_ignore == false)) {
            lv_iterate = 1;
            for ( ; ( (auto09C064DC_ai >= 0 && lv_iterate <= auto09C064DC_ae) || (auto09C064DC_ai < 0 && lv_iterate >= auto09C064DC_ae) ) ; lv_iterate += auto09C064DC_ai ) {
                if ((UserDataGetInt("CCTrainAbilityList", lv_instance, "Ban Unit?", lv_iterate) == 1)) {
                    auto01DA7FCA_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
                    auto01DA7FCA_var = -1;
                    while (true) {
                        auto01DA7FCA_var = PlayerGroupNextPlayer(auto01DA7FCA_g, auto01DA7FCA_var);
                        if (auto01DA7FCA_var < 0) { break; }
                        TechTreeUnitAllow(auto01DA7FCA_var, UserDataGetUnit("CCTrainAbilityList", lv_instance, "Units", lv_iterate), false);
                    }
                }

                autoC8631F79_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
                autoC8631F79_var = -1;
                while (true) {
                    autoC8631F79_var = PlayerGroupNextPlayer(autoC8631F79_g, autoC8631F79_var);
                    if (autoC8631F79_var < 0) { break; }
                    TechTreeAbilityAllow(autoC8631F79_var, UserDataGetAbilCmd("CCTrainAbilityList", lv_instance, "Ability Command", lv_iterate), false);
                }
            }
        }

    }
    lib966DE777_gv_reqCategoryCount = 99;
}

void lib966DE777_gf_CCBanCategoryofExemptTypes () {
    // Variable Declarations
    string lv_instance;
    int lv_iterate;
    int lv_iterate2;
    bool lv_ignore;

    // Automatic Variable Declarations
    string auto7A77350A_userType;
    int auto7A77350A_i;
    const int autoE5352BD1_ae = 4;
    const int autoE5352BD1_ai = 1;
    const int auto4818CEAC_ae = 10;
    const int auto4818CEAC_ai = 1;
    playergroup auto697D4DA7_g;
    int auto697D4DA7_var;
    playergroup autoB9D19335_g;
    int autoB9D19335_var;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_263661B6"));
    auto7A77350A_userType = "CCTrainAbilityList";
    auto7A77350A_i = 1;
    for ( ; auto7A77350A_i <= UserDataInstanceCount(auto7A77350A_userType) ; auto7A77350A_i += 1 ) {
        lv_instance = UserDataInstance(auto7A77350A_userType, auto7A77350A_i);
        lv_ignore = true;
        lv_iterate2 = 0;
        for ( ; ( (autoE5352BD1_ai >= 0 && lv_iterate2 <= autoE5352BD1_ae) || (autoE5352BD1_ai < 0 && lv_iterate2 >= autoE5352BD1_ae) ) ; lv_iterate2 += autoE5352BD1_ai ) {
            if ((lv_instance != lib966DE777_gv_productionExemptType[lv_iterate2]) && (UserDataGetInt("CCTrainAbilityList", lv_instance, "Category Flag", 1) == UserDataGetInt("CCTrainAbilityList", lib966DE777_gv_productionExemptType[lv_iterate2], "Category Flag", 1))) {
                lv_ignore = false;
                break;
            }

        }
        if ((lv_ignore == false)) {
            lv_iterate = 1;
            for ( ; ( (auto4818CEAC_ai >= 0 && lv_iterate <= auto4818CEAC_ae) || (auto4818CEAC_ai < 0 && lv_iterate >= auto4818CEAC_ae) ) ; lv_iterate += auto4818CEAC_ai ) {
                if ((UserDataGetInt("CCTrainAbilityList", lv_instance, "Ban Unit?", lv_iterate) == 1)) {
                    auto697D4DA7_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
                    auto697D4DA7_var = -1;
                    while (true) {
                        auto697D4DA7_var = PlayerGroupNextPlayer(auto697D4DA7_g, auto697D4DA7_var);
                        if (auto697D4DA7_var < 0) { break; }
                        TechTreeUnitAllow(auto697D4DA7_var, UserDataGetUnit("CCTrainAbilityList", lv_instance, "Units", lv_iterate), false);
                    }
                }

                autoB9D19335_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
                autoB9D19335_var = -1;
                while (true) {
                    autoB9D19335_var = PlayerGroupNextPlayer(autoB9D19335_g, autoB9D19335_var);
                    if (autoB9D19335_var < 0) { break; }
                    TechTreeAbilityAllow(autoB9D19335_var, UserDataGetAbilCmd("CCTrainAbilityList", lv_instance, "Ability Command", lv_iterate), false);
                }
            }
        }

    }
    lib966DE777_gv_reqCategoryCount = 99;
}

string lib966DE777_gf_CCGetProgressUnitCategory (string lp_unitType) {
    // Variable Declarations
    string lv_instance;
    int lv_iterate;

    // Automatic Variable Declarations
    string auto603911E2_userType;
    int auto603911E2_i;
    const int auto948077D3_ae = 10;
    const int auto948077D3_ai = 1;

    // Variable Initialization

    // Implementation
    auto603911E2_userType = "CCTrainAbilityList";
    auto603911E2_i = 1;
    for ( ; auto603911E2_i <= UserDataInstanceCount(auto603911E2_userType) ; auto603911E2_i += 1 ) {
        lv_instance = UserDataInstance(auto603911E2_userType, auto603911E2_i);
        lv_iterate = 1;
        for ( ; ( (auto948077D3_ai >= 0 && lv_iterate <= auto948077D3_ae) || (auto948077D3_ai < 0 && lv_iterate >= auto948077D3_ae) ) ; lv_iterate += auto948077D3_ai ) {
            if ((UserDataGetUnit("CCTrainAbilityList", lv_instance, "Units", lv_iterate) == lp_unitType)) {
                return lv_instance;
            }

        }
    }
    return null;
}

void lib966DE777_gf_CCProductionBanStart () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gf_CheckCCState("BanProduction 2", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_reqCategoryCount = 1;
        TriggerEnable(lib966DE777_gt_CCProductionBanActivate, true);
    }

    if ((lib966DE777_gf_CheckCCState("BanProduction 3", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_reqTypeCount = 1;
        TriggerEnable(lib966DE777_gt_CCProductionBanActivate, true);
    }

}

void lib966DE777_gf_CreateCCTopbarAbility (string lp_contract, string lp_overrideAbility) {
    // Variable Declarations
    string lv_ability;

    // Automatic Variable Declarations
    playergroup auto8A573267_g;
    int auto8A573267_var;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCState(lp_contract, lib966DE777_ge_CCCheckState_On) == true)) {
        if ((lib966DE777_gv_cCTopbarCreated == 0)) {
            TriggerExecute(lib966DE777_gt_CreateCCTopbar, true, true);
        }

        if ((lp_overrideAbility == null)) {
            lv_ability = UserDataGetGameLink("ContingencyContracts", lp_contract, "Associated Ability", 1);
        }
        else {
            lv_ability = lp_overrideAbility;
        }
        auto8A573267_g = lib966DE777_gv_cCPlayerSide;
        auto8A573267_var = -1;
        while (true) {
            auto8A573267_var = PlayerGroupNextPlayer(auto8A573267_g, auto8A573267_var);
            if (auto8A573267_var < 0) { break; }
            UnitAbilityAdd(lib966DE777_gv_cCTopbarUnit[auto8A573267_var], lv_ability);
        }
    }

}

trigger auto_lib966DE777_gf_RetaliateSolarLance_Trigger = null;
unit auto_lib966DE777_gf_RetaliateSolarLance_lp_targetUnit;
unit auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedUnit;
int auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedPlayer;
int auto_lib966DE777_gf_RetaliateSolarLance_lp_targetPlayer;

void lib966DE777_gf_RetaliateSolarLance (unit lp_targetUnit, unit lp_damagedUnit, int lp_damagedPlayer, int lp_targetPlayer) {
    auto_lib966DE777_gf_RetaliateSolarLance_lp_targetUnit = lp_targetUnit;
    auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedUnit = lp_damagedUnit;
    auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedPlayer = lp_damagedPlayer;
    auto_lib966DE777_gf_RetaliateSolarLance_lp_targetPlayer = lp_targetPlayer;

    if (auto_lib966DE777_gf_RetaliateSolarLance_Trigger == null) {
        auto_lib966DE777_gf_RetaliateSolarLance_Trigger = TriggerCreate("auto_lib966DE777_gf_RetaliateSolarLance_TriggerFunc");
    }

    TriggerExecute(auto_lib966DE777_gf_RetaliateSolarLance_Trigger, false, false);
}

bool auto_lib966DE777_gf_RetaliateSolarLance_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_lib966DE777_gf_RetaliateSolarLance_lp_targetUnit;
    unit lp_damagedUnit = auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedUnit;
    int lp_damagedPlayer = auto_lib966DE777_gf_RetaliateSolarLance_lp_damagedPlayer;
    int lp_targetPlayer = auto_lib966DE777_gf_RetaliateSolarLance_lp_targetPlayer;

    int init_i;

    // Variable Declarations
    point[5] lv_point;
    point lv_targetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_point[init_i] = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 6.0));
    }
    lv_targetPoint = UnitGetPosition(lp_targetUnit);

    // Implementation
    if (((UnitFilterMatch(lp_targetUnit, lp_damagedPlayer, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (DistanceBetweenPoints(UnitGetPosition(lp_targetUnit), UnitGetPosition(lp_damagedUnit)) > 15.0) || (RandomInt(1, 100) < 30))) {
        return true;
    }

    lib966DE777_gv_retaliateSolarLance = false;
    lv_point[1] = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 6.0));
    lv_point[2] = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 7.0));
    lv_point[3] = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_targetUnit), 8.0));
    libNtve_gf_UnitCreateFacingPoint(1, "CCSolarLanceDummy", 0, lp_damagedPlayer, lv_point[1], UnitGetPosition(EventUnit()));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CCThermalLanceExecute", 0), lv_targetPoint), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("SOABomberModeTarget_Select_Layer", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 100.0, 0.0);
    Wait(0.125, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CCSolarLanceDummy", 0, lp_damagedPlayer, lv_point[2], UnitGetPosition(EventUnit()));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CCThermalLanceExecute", 0), lv_targetPoint), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("SOABomberModeTarget_Select_Layer", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 100.0, 0.0);
    Wait(0.125, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CCSolarLanceDummy", 0, lp_damagedPlayer, lv_point[3], UnitGetPosition(EventUnit()));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("CCThermalLanceExecute", 0), lv_targetPoint), c_orderQueueReplace);
    SoundPlayForPlayer(SoundLink("SOABomberModeTarget_Select_Layer", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 100.0, 0.0);
    Wait(40.0, c_timeGame);
    lib966DE777_gv_retaliateSolarLance = true;
    return true;
}

void lib966DE777_gf_SpawnResourcePickup () {
    // Variable Declarations
    unit lv_resourcePickup;
    string lv_unitType;

    // Automatic Variable Declarations
    unitgroup auto2A8178F7_g;
    int auto2A8178F7_u;
    unit auto2A8178F7_var;

    // Variable Initialization
    lv_unitType = "CCNaturalMinerals50";

    // Implementation
    auto2A8178F7_g = lib966DE777_gv_spawnedPickups;
    auto2A8178F7_u = UnitGroupCount(auto2A8178F7_g, c_unitCountAll);
    for (;; auto2A8178F7_u -= 1) {
        auto2A8178F7_var = UnitGroupUnitFromEnd(auto2A8178F7_g, auto2A8178F7_u);
        if (auto2A8178F7_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(auto2A8178F7_var, RegionPlayableMap()) == false)) {
            UnitRemove(auto2A8178F7_var);
        }

    }
    if ((UnitGroupCount(lib966DE777_gv_spawnedPickups, c_unitCountAlive) < lib966DE777_gv_spawnPickupLimit)) {
        if ((RandomInt(1, 3) == 1)) {
            lv_unitType = "NaturalGas50";
        }

        libNtve_gf_CreateUnitsAtPoint2(1, lv_unitType, 0, 0, RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(lib966DE777_gv_spawnedPickups, UnitLastCreated());
    }

}

void lib966DE777_gf_StartResourceDrainTimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(lib966DE777_gv_resourceDrainTimer, lib966DE777_gv_resourceDrainInterval, false, c_timeGame);
    TimerWindowCreate(lib966DE777_gv_resourceDrainTimer, StringExternal("Param/Value/lib_966DE777_EBB26ABD"), false, false);
    lib966DE777_gv_resourceDrainTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lib966DE777_gv_resourceDrainTimerWindow, lib966DE777_gv_cCPlayerSide, true);
}

void lib966DE777_gf_ManageCollapsals () {
    // Automatic Variable Declarations
    unitgroup autoFBCAA9D8_g;
    int autoFBCAA9D8_u;
    unit autoFBCAA9D8_var;

    // Implementation
    autoFBCAA9D8_g = lib966DE777_gv_collapsals;
    autoFBCAA9D8_u = UnitGroupCount(autoFBCAA9D8_g, c_unitCountAll);
    for (;; autoFBCAA9D8_u -= 1) {
        autoFBCAA9D8_var = UnitGroupUnitFromEnd(autoFBCAA9D8_g, autoFBCAA9D8_u);
        if (autoFBCAA9D8_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoFBCAA9D8_var, RegionPlayableMap()) == true)) {
            if ((RandomInt(0, 50) <= 1)) {
                UnitIssueOrder(autoFBCAA9D8_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(autoFBCAA9D8_var), 8.0))), c_orderQueueReplace);
            }
            else {
                if (((RandomInt(0, 50) <= 10) || (UnitOrderCount(autoFBCAA9D8_var) == 0))) {
                    UnitIssueOrder(autoFBCAA9D8_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lib966DE777_gf_CCGrabclosestattackableEnemy(autoFBCAA9D8_var, lib966DE777_gv_cCDefaultFilter))), c_orderQueueReplace);
                }

            }
        }

    }
}

void lib966DE777_gf_SurviversPactApplyBuffs (string lp_unitType, int lp_player, string lp_behavior) {
    // Variable Declarations
    string lv_useriterate;

    // Automatic Variable Declarations
    unitgroup autoEA458289_g;
    int autoEA458289_u;
    unit autoEA458289_var;
    string autoDDB9BF0A_userType;
    int autoDDB9BF0A_i;
    unitgroup auto4E5529F0_g;
    int auto4E5529F0_u;
    unit auto4E5529F0_var;

    // Variable Initialization

    // Implementation
    autoEA458289_g = UnitGroup(lp_unitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEA458289_u = UnitGroupCount(autoEA458289_g, c_unitCountAll);
    for (;; autoEA458289_u -= 1) {
        autoEA458289_var = UnitGroupUnitFromEnd(autoEA458289_g, autoEA458289_u);
        if (autoEA458289_var == null) { break; }
        UnitBehaviorAdd(autoEA458289_var, lp_behavior, autoEA458289_var, 1);
    }
    autoDDB9BF0A_userType = "CCSameUnitTypeList";
    autoDDB9BF0A_i = 1;
    for ( ; autoDDB9BF0A_i <= UserDataInstanceCount(autoDDB9BF0A_userType) ; autoDDB9BF0A_i += 1 ) {
        lv_useriterate = UserDataInstance(autoDDB9BF0A_userType, autoDDB9BF0A_i);
        if ((lib966DE777_gf_CCUnitinUnitTypeList(lp_unitType, lv_useriterate) == true)) {
            auto4E5529F0_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            auto4E5529F0_u = UnitGroupCount(auto4E5529F0_g, c_unitCountAll);
            for (;; auto4E5529F0_u -= 1) {
                auto4E5529F0_var = UnitGroupUnitFromEnd(auto4E5529F0_g, auto4E5529F0_u);
                if (auto4E5529F0_var == null) { break; }
                if ((lib966DE777_gf_CCUnitinUnitTypeList(UnitGetType(auto4E5529F0_var), lv_useriterate) == true)) {
                    UnitBehaviorAdd(auto4E5529F0_var, lp_behavior, auto4E5529F0_var, 1);
                }

            }
        }

    }
}

void lib966DE777_gf_CCDeathlessCreateObjectives () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gf_CheckCCState("Deathless_3", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cCDeathlessSupplyQuota = 25.0;
        ObjectiveCreate((StringExternal("Param/Value/lib_966DE777_2622AF8D") + IntToText(FixedToInt(lib966DE777_gv_cCDeathlessSupplyQuota)) + StringExternal("Param/Value/lib_966DE777_4FFDE9C7") + IntToText(FixedToInt(lib966DE777_gv_cCSuppliesLost)) + StringExternal("Param/Value/lib_966DE777_7DF7B8F0")), StringToText(""), c_objectiveStateActive, true);
        DataTableSetObjective(true, "ObjDeathless", ObjectiveLastCreated());
    }

    if ((lib966DE777_gf_CheckCCState("Deathless_5", lib966DE777_ge_CCCheckState_On) == true)) {
        ObjectiveCreate(StringExternal("Param/Value/lib_966DE777_503F65BA"), StringToText(""), c_objectiveStateActive, true);
        DataTableSetObjective(true, "ObjDeathless", ObjectiveLastCreated());
    }

}

void lib966DE777_gf_CCStartZergAssaultTimer () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gf_CheckCCState("PrimalDrop", lib966DE777_ge_CCCheckState_On) == true)) {
        TimerStart(lib966DE777_gv_cCZergAssaultTimer, 90.0, false, c_timeGame);
    }

    if ((lib966DE777_gf_CheckCCState("LeviDrop", lib966DE777_ge_CCCheckState_On) == true)) {
        TimerStart(lib966DE777_gv_cCZergAssaultTimer, 180.0, false, c_timeGame);
    }

}

void lib966DE777_gf_MassApplyCCClimateBehavior (string lp_climate, string lp_overrideBehavior, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_behavior;

    // Automatic Variable Declarations
    playergroup auto3B82E68C_g;
    int auto3B82E68C_var;
    unitgroup auto6F3DD873_g;
    int auto6F3DD873_u;
    unit auto6F3DD873_var;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCClimateState(lp_climate, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideBehavior == null)) {
        lv_behavior = UserDataGetGameLink("CCWeatherConditions", lp_climate, "Associated Behavior", 1);
    }
    else {
        lv_behavior = lp_overrideBehavior;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    auto3B82E68C_g = lv_targetPlayerGroup;
    auto3B82E68C_var = -1;
    while (true) {
        auto3B82E68C_var = PlayerGroupNextPlayer(auto3B82E68C_g, auto3B82E68C_var);
        if (auto3B82E68C_var < 0) { break; }
        auto6F3DD873_g = UnitGroup(lp_unitType, auto3B82E68C_var, RegionEntireMap(), lp_unitFilter, 0);
        auto6F3DD873_u = UnitGroupCount(auto6F3DD873_g, c_unitCountAll);
        for (;; auto6F3DD873_u -= 1) {
            auto6F3DD873_var = UnitGroupUnitFromEnd(auto6F3DD873_g, auto6F3DD873_u);
            if (auto6F3DD873_var == null) { break; }
            UnitBehaviorAdd(auto6F3DD873_var, lv_behavior, auto6F3DD873_var, 1);
        }
    }
}

void lib966DE777_gf_MassRemoveCCClimateBehavior (string lp_climate, string lp_overrideBehavior, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_behavior;

    // Automatic Variable Declarations
    playergroup auto2FDED7D3_g;
    int auto2FDED7D3_var;
    unitgroup auto8087A5FC_g;
    int auto8087A5FC_u;
    unit auto8087A5FC_var;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCClimateState(lp_climate, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideBehavior == null)) {
        lv_behavior = UserDataGetGameLink("CCWeatherConditions", lp_climate, "Associated Behavior", 1);
    }
    else {
        lv_behavior = lp_overrideBehavior;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    auto2FDED7D3_g = lv_targetPlayerGroup;
    auto2FDED7D3_var = -1;
    while (true) {
        auto2FDED7D3_var = PlayerGroupNextPlayer(auto2FDED7D3_g, auto2FDED7D3_var);
        if (auto2FDED7D3_var < 0) { break; }
        auto8087A5FC_g = UnitGroup(lp_unitType, auto2FDED7D3_var, RegionEntireMap(), lp_unitFilter, 0);
        auto8087A5FC_u = UnitGroupCount(auto8087A5FC_g, c_unitCountAll);
        for (;; auto8087A5FC_u -= 1) {
            auto8087A5FC_var = UnitGroupUnitFromEnd(auto8087A5FC_g, auto8087A5FC_u);
            if (auto8087A5FC_var == null) { break; }
            libNtve_gf_SetBehaviorCount(auto8087A5FC_var, lv_behavior, auto8087A5FC_var, 0);
        }
    }
}

void lib966DE777_gf_MassApplyCCClimateUpgrades () {
    // Variable Declarations
    string lv_climateiterate;
    int lv_iterate;

    // Automatic Variable Declarations
    string auto3DDE1B4B_userType;
    int auto3DDE1B4B_i;
    playergroup autoA353C3ED_g;
    int autoA353C3ED_var;
    const int autoC5670F78_ae = 5;
    const int autoC5670F78_ai = 1;
    playergroup auto5C971D95_g;
    int auto5C971D95_var;
    const int auto722F0ED5_ae = 5;
    const int auto722F0ED5_ai = 1;

    // Variable Initialization

    // Implementation
    auto3DDE1B4B_userType = "CCWeatherConditions";
    auto3DDE1B4B_i = 1;
    for ( ; auto3DDE1B4B_i <= UserDataInstanceCount(auto3DDE1B4B_userType) ; auto3DDE1B4B_i += 1 ) {
        lv_climateiterate = UserDataInstance(auto3DDE1B4B_userType, auto3DDE1B4B_i);
        if ((lib966DE777_gf_CheckCCClimateState(lv_climateiterate, lib966DE777_ge_CCCheckState_On) == true)) {
            autoA353C3ED_g = lib966DE777_gv_cCPlayerSide;
            autoA353C3ED_var = -1;
            while (true) {
                autoA353C3ED_var = PlayerGroupNextPlayer(autoA353C3ED_g, autoA353C3ED_var);
                if (autoA353C3ED_var < 0) { break; }
                lv_iterate = 1;
                for ( ; ( (autoC5670F78_ai >= 0 && lv_iterate <= autoC5670F78_ae) || (autoC5670F78_ai < 0 && lv_iterate >= autoC5670F78_ae) ) ; lv_iterate += autoC5670F78_ai ) {
                    TechTreeUpgradeAddLevel(autoA353C3ED_var, UserDataGetUpgrade("CCWeatherConditions", lv_climateiterate, "Player Upgrades", lv_iterate), 1);
                }
            }
            auto5C971D95_g = lib966DE777_gv_cCEnemySide;
            auto5C971D95_var = -1;
            while (true) {
                auto5C971D95_var = PlayerGroupNextPlayer(auto5C971D95_g, auto5C971D95_var);
                if (auto5C971D95_var < 0) { break; }
                lv_iterate = 1;
                for ( ; ( (auto722F0ED5_ai >= 0 && lv_iterate <= auto722F0ED5_ae) || (auto722F0ED5_ai < 0 && lv_iterate >= auto722F0ED5_ae) ) ; lv_iterate += auto722F0ED5_ai ) {
                    TechTreeUpgradeAddLevel(auto5C971D95_var, UserDataGetUpgrade("CCWeatherConditions", lv_climateiterate, "Enemy Upgrades", lv_iterate), 1);
                }
            }
        }

    }
}

void lib966DE777_gf_MassRemoveCCClimateUpgrades () {
    // Variable Declarations
    string lv_climateiterate;
    int lv_iterate;

    // Automatic Variable Declarations
    string auto4FFDF775_userType;
    int auto4FFDF775_i;
    playergroup auto1C18F525_g;
    int auto1C18F525_var;
    const int auto60958CE1_ae = 5;
    const int auto60958CE1_ai = 1;
    playergroup auto8564B917_g;
    int auto8564B917_var;
    const int autoE80D79E6_ae = 5;
    const int autoE80D79E6_ai = 1;

    // Variable Initialization

    // Implementation
    auto4FFDF775_userType = "CCWeatherConditions";
    auto4FFDF775_i = 1;
    for ( ; auto4FFDF775_i <= UserDataInstanceCount(auto4FFDF775_userType) ; auto4FFDF775_i += 1 ) {
        lv_climateiterate = UserDataInstance(auto4FFDF775_userType, auto4FFDF775_i);
        if ((lib966DE777_gf_CheckCCClimateState(lv_climateiterate, lib966DE777_ge_CCCheckState_On) == true)) {
            auto1C18F525_g = lib966DE777_gv_cCPlayerSide;
            auto1C18F525_var = -1;
            while (true) {
                auto1C18F525_var = PlayerGroupNextPlayer(auto1C18F525_g, auto1C18F525_var);
                if (auto1C18F525_var < 0) { break; }
                lv_iterate = 1;
                for ( ; ( (auto60958CE1_ai >= 0 && lv_iterate <= auto60958CE1_ae) || (auto60958CE1_ai < 0 && lv_iterate >= auto60958CE1_ae) ) ; lv_iterate += auto60958CE1_ai ) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto1C18F525_var, UserDataGetUpgrade("CCWeatherConditions", lv_climateiterate, "Player Upgrades", lv_iterate), 0);
                }
            }
            auto8564B917_g = lib966DE777_gv_cCEnemySide;
            auto8564B917_var = -1;
            while (true) {
                auto8564B917_var = PlayerGroupNextPlayer(auto8564B917_g, auto8564B917_var);
                if (auto8564B917_var < 0) { break; }
                lv_iterate = 1;
                for ( ; ( (autoE80D79E6_ai >= 0 && lv_iterate <= autoE80D79E6_ae) || (autoE80D79E6_ai < 0 && lv_iterate >= autoE80D79E6_ae) ) ; lv_iterate += autoE80D79E6_ai ) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto8564B917_var, UserDataGetUpgrade("CCWeatherConditions", lv_climateiterate, "Enemy Upgrades", lv_iterate), 0);
                }
            }
        }

    }
}

void lib966DE777_gf_ApplyCCClimateBehaviortoUnit (string lp_climate, string lp_overrideBehavior, unit lp_unit, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPlayerGroup = lib966DE777_gv_cCEnemySide;

    // Implementation
    if (((lib966DE777_gf_CheckCCClimateState(lp_climate, lib966DE777_ge_CCCheckState_On) == false) || (lib966DE777_gv_cCClimateToggleState == 0))) {
        return ;
    }

    if ((lp_overrideBehavior == null)) {
        lv_behavior = UserDataGetGameLink("CCWeatherConditions", lp_climate, "Associated Behavior", 1);
    }
    else {
        lv_behavior = lp_overrideBehavior;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    if ((UnitFilterMatch(lp_unit, 1, lp_unitFilter) == true) && ((UnitGetType(lp_unit) == lp_unitType) || (lp_unitType == null)) && (PlayerGroupHasPlayer(lv_targetPlayerGroup, UnitGetOwner(lp_unit)) == true)) {
        UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
    }

}

void lib966DE777_gf_StartCCClimateTimer (string lp_climate) {
    // Automatic Variable Declarations
    // Implementation
    lib966DE777_gv_currentCCClimate = lp_climate;
    lib966DE777_gv_cCClimateCooldown = UserDataGetFixed("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Cooldown", 1);
    lib966DE777_gv_cCClimateDuration = UserDataGetFixed("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Duration", 1);
    TimerStart(lib966DE777_gv_cCClimateTimer, lib966DE777_gv_cCClimateCooldown, false, c_timeGame);
    TimerWindowCreate(lib966DE777_gv_cCClimateTimer, StringExternal("Param/Value/lib_966DE777_CFB41475"), true, false);
}

void lib966DE777_gf_InitializeCCClimate () {
    // Variable Declarations
    string lv_climateIterate;

    // Automatic Variable Declarations
    string auto0350B805_userType;
    int auto0350B805_i;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCState("ClimateChaos", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gf_ChaoticEraRandomizeClimate();
        TimerStart(lib966DE777_gv_cCClimateTimer, lib966DE777_gv_cCClimateCooldown, false, c_timeGame);
        TimerWindowCreate(lib966DE777_gv_cCClimateTimer, StringExternal("Param/Value/lib_966DE777_15F566F9"), true, false);
    }
    else {
        auto0350B805_userType = "CCWeatherConditions";
        auto0350B805_i = 1;
        for ( ; auto0350B805_i <= UserDataInstanceCount(auto0350B805_userType) ; auto0350B805_i += 1 ) {
            lv_climateIterate = UserDataInstance(auto0350B805_userType, auto0350B805_i);
            if ((lib966DE777_gf_CheckCCState(UserDataGetUserInstance("CCWeatherConditions", lv_climateIterate, "Contract", 1), lib966DE777_ge_CCCheckState_On) == true)) {
                lib966DE777_gf_StartCCClimateTimer(lv_climateIterate);
                break;
            }

        }
    }
}

bool lib966DE777_gf_CheckCCClimateState (string lp_climate, int lp_checkState) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_checkState == lib966DE777_ge_CCCheckState_On) && (UserDataGetInt("CCWeatherConditions", lp_climate, "ToggleState", 1) == 1)) {
        return true;
    }

    if ((lp_checkState == lib966DE777_ge_CCCheckState_Available) && (UserDataGetInt("ContingencyContracts", UserDataGetUserInstance("CCWeatherConditions", lp_climate, "Contract", 1), "Availability", 1) == 1)) {
        return true;
    }

    return false;
}

void lib966DE777_gf_CCClimateSetLighting () {
    // Variable Declarations
    string lv_lighting;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lighting = UserDataGetGameLink("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Lighting", 1);
    if ((lib966DE777_gv_cCAllowLightingChange == true) && (lv_lighting != null)) {
        GameSetLighting(lv_lighting, 3.0);
    }

}

void lib966DE777_gf_ChaoticEraRandomizeClimate () {
    // Variable Declarations
    string lv_climateIterate;
    string[11] lv_availableClimates;
    int lv_availableCount;

    // Automatic Variable Declarations
    string auto331374F9_userType;
    int auto331374F9_i;

    // Variable Initialization

    // Implementation
    auto331374F9_userType = "CCWeatherConditions";
    auto331374F9_i = 1;
    for ( ; auto331374F9_i <= UserDataInstanceCount(auto331374F9_userType) ; auto331374F9_i += 1 ) {
        lv_climateIterate = UserDataInstance(auto331374F9_userType, auto331374F9_i);
        if ((lib966DE777_gf_CheckCCClimateState(lv_climateIterate, lib966DE777_ge_CCCheckState_Available) == true)) {
            lv_availableCount += 1;
            lv_availableClimates[lv_availableCount] = lv_climateIterate;
        }

    }
    lib966DE777_gv_currentCCClimate = lv_availableClimates[RandomInt(1, lv_availableCount)];
    lib966DE777_gv_cCClimateCooldown = (RandomFixed(1.0, 1.0) * UserDataGetFixed("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Cooldown", 1));
    lib966DE777_gv_cCClimateDuration = (RandomFixed(1.0, 1.0) * UserDataGetFixed("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Duration", 1));
}

point lib966DE777_gf_GetPlayerPrimaryBaseLocation (int lp_player) {
    // Variable Declarations
    unitgroup lv_tempUnitGroup;

    // Automatic Variable Declarations
    playergroup autoCF16EBC5_g;
    int autoCF16EBC5_var;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();

    // Implementation
    lib966DE777_gf_CheckandassignPrimaryBase();
    if ((lp_player == 0)) {
        autoCF16EBC5_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
        autoCF16EBC5_var = -1;
        while (true) {
            autoCF16EBC5_var = PlayerGroupNextPlayer(autoCF16EBC5_g, autoCF16EBC5_var);
            if (autoCF16EBC5_var < 0) { break; }
            if ((UnitIsAlive(lib966DE777_gv_playerPrimaryBase[autoCF16EBC5_var]) == true) && (lib966DE777_gv_playerPrimaryBase[autoCF16EBC5_var] != null)) {
                UnitGroupAdd(lv_tempUnitGroup, lib966DE777_gv_playerPrimaryBase[autoCF16EBC5_var]);
            }

        }
        return UnitGetPosition(UnitGroupRandomUnit(lv_tempUnitGroup, c_unitCountAlive));
    }
    else {
        return UnitGetPosition(lib966DE777_gv_playerPrimaryBase[lp_player]);
    }
    return null;
}

void lib966DE777_gf_CheckandassignPrimaryBase () {
    // Automatic Variable Declarations
    playergroup autoA5D05859_g;
    int autoA5D05859_var;

    // Implementation
    autoA5D05859_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
    autoA5D05859_var = -1;
    while (true) {
        autoA5D05859_var = PlayerGroupNextPlayer(autoA5D05859_g, autoA5D05859_var);
        if (autoA5D05859_var < 0) { break; }
        if ((UnitIsAlive(lib966DE777_gv_playerPrimaryBase[autoA5D05859_var]) == true) && (lib966DE777_gv_playerPrimaryBase[autoA5D05859_var] != null)) {
        }
        else {
            lib966DE777_gv_playerPrimaryBase[autoA5D05859_var] = UnitGroupClosestToPoint(UnitGroup(null, autoA5D05859_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), PlayerStartLocation(autoA5D05859_var));
        }
    }
}

void lib966DE777_gf_GoldenChaliceUpdate () {
    // Variable Declarations
    int lv_stacks;

    // Automatic Variable Declarations
    playergroup autoC17170FB_g;
    int autoC17170FB_var;

    // Variable Initialization

    // Implementation
    autoC17170FB_g = lib966DE777_gv_cCPlayerSide;
    autoC17170FB_var = -1;
    while (true) {
        autoC17170FB_var = PlayerGroupNextPlayer(autoC17170FB_g, autoC17170FB_var);
        if (autoC17170FB_var < 0) { break; }
        lv_stacks = 0;
        lv_stacks += (PlayerGetPropertyInt(autoC17170FB_var, c_playerPropMinerals) / 500);
        lv_stacks += (PlayerGetPropertyInt(autoC17170FB_var, c_playerPropVespene) / 500);
        libNtve_gf_SetUpgradeLevelForPlayer(autoC17170FB_var, "CCGoldenChaliceStacks", lv_stacks);
    }
}

void lib966DE777_gf_FatalImpact (int lp_player) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_nukesRemaining;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nukesRemaining = 99;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_F21803B5"));
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    while ((lv_nukesRemaining > 0)) {
        lv_targetPoint = RegionRandomPoint(RegionPlayableMap());
        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_targetPoint, 8.0), UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceEnemy, RegionCircle(lv_targetPoint, 16.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) > 0) || (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), c_unitCountAlive) == 0))) {
            libNtve_gf_CreateUnitsAtPoint2(1, "CCNukeDetonateDummy", c_unitCreateIgnorePlacement, lp_player, lv_targetPoint);
            lv_nukesRemaining -= 1;
            Wait(0.0625, c_timeGame);
        }

    }
}

void lib966DE777_gf_CCAtkDownUpdate () {
    // Automatic Variable Declarations
    playergroup auto4CB4141F_g;
    int auto4CB4141F_var;

    // Implementation
    auto4CB4141F_g = PlayerGroupAll();
    auto4CB4141F_var = -1;
    while (true) {
        auto4CB4141F_var = PlayerGroupNextPlayer(auto4CB4141F_g, auto4CB4141F_var);
        if (auto4CB4141F_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto4CB4141F_var, "CCAttackDownTimeProgress", 1);
    }
}

trigger auto_lib966DE777_gf_GuidedNukeFollow_Trigger = null;
unit auto_lib966DE777_gf_GuidedNukeFollow_lp_targetUnit;

void lib966DE777_gf_GuidedNukeFollow (unit lp_targetUnit) {
    auto_lib966DE777_gf_GuidedNukeFollow_lp_targetUnit = lp_targetUnit;

    if (auto_lib966DE777_gf_GuidedNukeFollow_Trigger == null) {
        auto_lib966DE777_gf_GuidedNukeFollow_Trigger = TriggerCreate("auto_lib966DE777_gf_GuidedNukeFollow_TriggerFunc");
    }

    TriggerExecute(auto_lib966DE777_gf_GuidedNukeFollow_Trigger, false, false);
}

bool auto_lib966DE777_gf_GuidedNukeFollow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_targetUnit = auto_lib966DE777_gf_GuidedNukeFollow_lp_targetUnit;

    // Variable Declarations
    int lv_followcountdown;
    unit lv_nukeUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_followcountdown = 240;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CCGuidedNuke", 0, UnitGetOwner(lp_targetUnit), UnitGetPosition(lp_targetUnit));
    lv_nukeUnit = UnitLastCreated();
    while ((lv_followcountdown >= 1) && (UnitIsAlive(lp_targetUnit) == true)) {
        Wait(0.0625, c_timeGame);
        lv_followcountdown -= 1;
        UnitIssueOrder(lv_nukeUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lp_targetUnit)), c_orderQueueReplace);
    }
    return true;
}

void lib966DE777_gf_CCGameSpeed () {
    // Automatic Variable Declarations
    // Implementation
    if ((libLotv_gf_DifficultyValueVoidBoolean(true, true, false, false) == true)) {
        GameSetSpeedValue(c_gameSpeedNormal);
        if ((libLotv_gf_DifficultyValueVoidBoolean(true, false, false, false) == true)) {
            GameSetSpeedValueMinimum(c_gameSpeedSlower);
        }
        else {
            GameSetSpeedValueMinimum(c_gameSpeedNormal);
        }
    }
    else {
        if ((libLotv_gf_DifficultyValueVoidBoolean(false, false, true, false) == true)) {
            GameSetSpeedValueMinimum(c_gameSpeedFast);
        }
        else {
            GameSetSpeedValueMinimum(c_gameSpeedFaster);
        }
    }
}

void lib966DE777_gf_CCPauseUnpauseGame (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pauseUnpause == true)) {
        GameSetMissionTimePaused(true);
        lib966DE777_gv_cCGamePaused = true;
        TriggerQueuePause(true);
        AITimePause(true);
        UnitPauseAll(true);
    }
    else {
        GameSetMissionTimePaused(false);
        lib966DE777_gv_cCGamePaused = false;
        TriggerQueuePause(false);
        AITimePause(false);
        UnitPauseAll(false);
    }
}

unit lib966DE777_gf_CCGrabclosestattackableEnemy (unit lp_unit, unitfilter lp_unitFilter) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitGroup = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceEnemy, RegionPlayableMap(), lp_unitFilter, 0);

    // Implementation
    lv_target = UnitGroupClosestToPoint(lv_unitGroup, UnitGetPosition(lp_unit));
    while ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) > 0) && (UnitCanAttackTarget(lp_unit, lv_target) == false)) {
        UnitGroupRemove(lv_unitGroup, lv_target);
        lv_target = UnitGroupClosestToPoint(lv_unitGroup, UnitGetPosition(lp_unit));
    }
    return lv_target;
}

void lib966DE777_gf_CCIssueenemyorder (unit lp_unit, order lp_order) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_unit);

    // Implementation
    if ((lib966DE777_gv_cC_Enemy_Has_AI[lv_player] == true)) {
        libNtve_gf_AICast(lp_unit, lp_order);
    }
    else {
        UnitIssueOrder(lp_unit, lp_order, c_orderQueueReplace);
    }
}

void lib966DE777_gf_CCorderunittoburrow (unit lp_unit) {
    // Variable Declarations
    order lv_order;

    // Automatic Variable Declarations
    string auto01C43185_val;

    // Variable Initialization
    lv_order = Order(AbilityCommand("BurrowZerglingDown", 0));

    // Implementation
    auto01C43185_val = UnitGetType(lp_unit);
    if (auto01C43185_val == "Baneling") {
        lv_order = Order(AbilityCommand("BurrowBanelingDown", 0));
    }
    else if (auto01C43185_val == "HotSSplitterlingBig") {
        lv_order = Order(AbilityCommand("BurrowHotSSplitterlingBigDown", 0));
    }
    else if (auto01C43185_val == "Hydralisk") {
        lv_order = Order(AbilityCommand("BurrowHydraliskDown", 0));
    }
    else if (auto01C43185_val == "HotSRaptor") {
        lv_order = Order(AbilityCommand("BurrowHotSRaptorDown", 0));
    }
    else if (auto01C43185_val == "InfestedAbomination") {
        lv_order = Order(AbilityCommand("BurrowInfestedAbominationDown", 0));
    }
    else if (auto01C43185_val == "Roach") {
        lv_order = Order(AbilityCommand("BurrowRoachDown", 0));
    }
    else if (auto01C43185_val == "RoachVile") {
        lv_order = Order(AbilityCommand("HotSBurrowVileDown", 0));
    }
    else {
    }
    lib966DE777_gf_CCIssueenemyorder(lp_unit, lv_order);
}

void lib966DE777_gf_CCFullProcessUnits (unitgroup lp_units) {
    // Automatic Variable Declarations
    unitgroup auto8B5B4E2F_g;
    int auto8B5B4E2F_u;
    unit auto8B5B4E2F_var;

    // Implementation
    auto8B5B4E2F_g = lp_units;
    auto8B5B4E2F_u = UnitGroupCount(auto8B5B4E2F_g, c_unitCountAll);
    for (;; auto8B5B4E2F_u -= 1) {
        auto8B5B4E2F_var = UnitGroupUnitFromEnd(auto8B5B4E2F_g, auto8B5B4E2F_u);
        if (auto8B5B4E2F_var == null) { break; }
        lib966DE777_gf_CCProcessUnitBehaviorsAbilities(auto8B5B4E2F_var, false);
        if ((lib966DE777_gv_cCRandomizerActive == true) && (PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), UnitGetOwner(auto8B5B4E2F_var)) == true)) {
            lib966DE777_gf_CCApplyRandomizetoUnit(auto8B5B4E2F_var);
        }

        if ((lib966DE777_gv_cCPlayerFactionIndex != 0)) {
            lib966DE777_gf_CCFactionSwapUnit(auto8B5B4E2F_var, lib966DE777_gv_cCPlayerFactionIndex);
        }

    }
}

void lib966DE777_gf_CCProcessUnitBehaviorsAbilities (unit lp_targetUnit, bool lp_inverse) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_targetUnit;

    // Implementation
    lib966DE777_gf_CCApplyUnitCategoryIdentifier(lp_targetUnit, "ProductionStructureIdentifier", "Production", UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))));
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("Great Silence", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("FlashFreeze", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("ScorchSun", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("AntiGravity", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("GammaStorm", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
    lib966DE777_gf_ApplyCCClimateBehaviortoUnit("BlackUnit", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_All);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Enemy_Atk 2", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Enemy_Atk 3", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("GuardianShell", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("HPdown2", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("HPdown3", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("TimedVirus", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("NetherCreep", null, lv_unit, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Pacifist 5", "PacifismPlayerIdentifier", lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Pacifist 5", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("BlackCrown", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Cooldown", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Atkdownearly", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Atkdownlate", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("BadLoad", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Enemyfast", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Enemy_HP 2", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Enemy_HP 3", null, lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("King Aspd", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("BurrowAmbush", null, lv_unit, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Gold Chalice", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("InfEnergy", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("InfEnergy", "HandofInfinityVictim", lv_unit, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_EnemyExclusive, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("KineticBoost", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Surviver Pact", null, lv_unit, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Chrono CWAL", null, lv_unit, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCBehaviortoUnit("Infestation", null, lv_unit, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCAbilitytoUnit("Laevateinn", null, lv_unit, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCAbilitytoUnit("Booster", null, lv_unit, null, UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
    lib966DE777_gf_ApplyCCAbilitytoUnit("Sandevistan", null, lv_unit, null, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, lp_inverse);
}

void lib966DE777_gf_MassApplyCCUpgrades (bool lp_inverse) {
    // Variable Declarations
    string lv_cciterate;
    int lv_iterate;
    int lv_change;

    // Automatic Variable Declarations
    string autoEC8B896E_userType;
    int autoEC8B896E_i;
    playergroup autoE2111210_g;
    int autoE2111210_var;
    const int autoF382FD97_ae = 5;
    const int autoF382FD97_ai = 1;
    playergroup auto67E9FCCE_g;
    int auto67E9FCCE_var;
    const int auto9D83DDED_ae = 5;
    const int auto9D83DDED_ai = 1;
    playergroup auto1C01A3D3_g;
    int auto1C01A3D3_var;
    const int auto5730BE07_ae = 5;
    const int auto5730BE07_ai = 1;

    // Variable Initialization
    lv_change = 1;

    // Implementation
    autoEC8B896E_userType = "ContingencyContracts";
    autoEC8B896E_i = 1;
    for ( ; autoEC8B896E_i <= UserDataInstanceCount(autoEC8B896E_userType) ; autoEC8B896E_i += 1 ) {
        lv_cciterate = UserDataInstance(autoEC8B896E_userType, autoEC8B896E_i);
        if ((lib966DE777_gf_CheckCCState(lv_cciterate, lib966DE777_ge_CCCheckState_On) == true)) {
            if ((lp_inverse == true)) {
                lv_change = -1;
            }

            if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Special Flags", 4) == 1)) {
                auto1C01A3D3_g = PlayerGroupAll();
                auto1C01A3D3_var = -1;
                while (true) {
                    auto1C01A3D3_var = PlayerGroupNextPlayer(auto1C01A3D3_g, auto1C01A3D3_var);
                    if (auto1C01A3D3_var < 0) { break; }
                    lv_iterate = 1;
                    for ( ; ( (auto5730BE07_ai >= 0 && lv_iterate <= auto5730BE07_ae) || (auto5730BE07_ai < 0 && lv_iterate >= auto5730BE07_ae) ) ; lv_iterate += auto5730BE07_ai ) {
                        TechTreeUpgradeAddLevel(auto1C01A3D3_var, UserDataGetUpgrade("ContingencyContracts", lv_cciterate, "Player Upgrades", lv_iterate), lv_change);
                        TechTreeUpgradeAddLevel(auto1C01A3D3_var, UserDataGetUpgrade("ContingencyContracts", lv_cciterate, "Enemy Upgrade", lv_iterate), lv_change);
                    }
                }
            }
            else {
                autoE2111210_g = lib966DE777_gv_cCPlayerSide;
                autoE2111210_var = -1;
                while (true) {
                    autoE2111210_var = PlayerGroupNextPlayer(autoE2111210_g, autoE2111210_var);
                    if (autoE2111210_var < 0) { break; }
                    lv_iterate = 1;
                    for ( ; ( (autoF382FD97_ai >= 0 && lv_iterate <= autoF382FD97_ae) || (autoF382FD97_ai < 0 && lv_iterate >= autoF382FD97_ae) ) ; lv_iterate += autoF382FD97_ai ) {
                        TechTreeUpgradeAddLevel(autoE2111210_var, UserDataGetUpgrade("ContingencyContracts", lv_cciterate, "Player Upgrades", lv_iterate), lv_change);
                    }
                }
                auto67E9FCCE_g = lib966DE777_gv_cCEnemySide;
                auto67E9FCCE_var = -1;
                while (true) {
                    auto67E9FCCE_var = PlayerGroupNextPlayer(auto67E9FCCE_g, auto67E9FCCE_var);
                    if (auto67E9FCCE_var < 0) { break; }
                    lv_iterate = 1;
                    for ( ; ( (auto9D83DDED_ai >= 0 && lv_iterate <= auto9D83DDED_ae) || (auto9D83DDED_ai < 0 && lv_iterate >= auto9D83DDED_ae) ) ; lv_iterate += auto9D83DDED_ai ) {
                        TechTreeUpgradeAddLevel(auto67E9FCCE_var, UserDataGetUpgrade("ContingencyContracts", lv_cciterate, "Enemy Upgrade", lv_iterate), lv_change);
                    }
                }
            }
        }

    }
}

void lib966DE777_gf_MassApplyCCBehavior (string lp_contract, string lp_overrideBehavior, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy, bool lp_inverse) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_behavior;

    // Automatic Variable Declarations
    playergroup auto4F82FF1B_g;
    int auto4F82FF1B_var;
    unitgroup autoB05014D7_g;
    int autoB05014D7_u;
    unit autoB05014D7_var;
    unitgroup auto6A8B3373_g;
    int auto6A8B3373_u;
    unit auto6A8B3373_var;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCState(lp_contract, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideBehavior == null)) {
        lv_behavior = UserDataGetGameLink("ContingencyContracts", lp_contract, "Associated Behavior", 1);
    }
    else {
        lv_behavior = lp_overrideBehavior;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    auto4F82FF1B_g = lv_targetPlayerGroup;
    auto4F82FF1B_var = -1;
    while (true) {
        auto4F82FF1B_var = PlayerGroupNextPlayer(auto4F82FF1B_g, auto4F82FF1B_var);
        if (auto4F82FF1B_var < 0) { break; }
        if ((lp_inverse == false)) {
            auto6A8B3373_g = UnitGroup(lp_unitType, auto4F82FF1B_var, RegionEntireMap(), lp_unitFilter, 0);
            auto6A8B3373_u = UnitGroupCount(auto6A8B3373_g, c_unitCountAll);
            for (;; auto6A8B3373_u -= 1) {
                auto6A8B3373_var = UnitGroupUnitFromEnd(auto6A8B3373_g, auto6A8B3373_u);
                if (auto6A8B3373_var == null) { break; }
                UnitBehaviorAdd(auto6A8B3373_var, lv_behavior, auto6A8B3373_var, 1);
            }
        }
        else {
            autoB05014D7_g = UnitGroup(lp_unitType, auto4F82FF1B_var, RegionEntireMap(), lp_unitFilter, 0);
            autoB05014D7_u = UnitGroupCount(autoB05014D7_g, c_unitCountAll);
            for (;; autoB05014D7_u -= 1) {
                autoB05014D7_var = UnitGroupUnitFromEnd(autoB05014D7_g, autoB05014D7_u);
                if (autoB05014D7_var == null) { break; }
                UnitBehaviorRemove(autoB05014D7_var, lv_behavior, 1);
            }
        }
    }
}

void lib966DE777_gf_MassApplyCCAbility (string lp_contract, string lp_overrideAbility, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy, bool lp_inverse) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_ability;

    // Automatic Variable Declarations
    playergroup auto9A9E7BAB_g;
    int auto9A9E7BAB_var;
    unitgroup auto9180D93B_g;
    int auto9180D93B_u;
    unit auto9180D93B_var;
    playergroup autoFE5E1C8C_g;
    int autoFE5E1C8C_var;
    unitgroup autoC91A4113_g;
    int autoC91A4113_u;
    unit autoC91A4113_var;

    // Variable Initialization

    // Implementation
    if ((lib966DE777_gf_CheckCCState(lp_contract, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideAbility == null)) {
        lv_ability = UserDataGetGameLink("ContingencyContracts", lp_contract, "Associated Ability", 1);
    }
    else {
        lv_ability = lp_overrideAbility;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    if ((lp_inverse == false)) {
        autoFE5E1C8C_g = lv_targetPlayerGroup;
        autoFE5E1C8C_var = -1;
        while (true) {
            autoFE5E1C8C_var = PlayerGroupNextPlayer(autoFE5E1C8C_g, autoFE5E1C8C_var);
            if (autoFE5E1C8C_var < 0) { break; }
            autoC91A4113_g = UnitGroup(lp_unitType, autoFE5E1C8C_var, RegionEntireMap(), lp_unitFilter, 0);
            autoC91A4113_u = UnitGroupCount(autoC91A4113_g, c_unitCountAll);
            for (;; autoC91A4113_u -= 1) {
                autoC91A4113_var = UnitGroupUnitFromEnd(autoC91A4113_g, autoC91A4113_u);
                if (autoC91A4113_var == null) { break; }
                UnitAbilityAdd(autoC91A4113_var, lv_ability);
            }
        }
    }
    else {
        auto9A9E7BAB_g = lv_targetPlayerGroup;
        auto9A9E7BAB_var = -1;
        while (true) {
            auto9A9E7BAB_var = PlayerGroupNextPlayer(auto9A9E7BAB_g, auto9A9E7BAB_var);
            if (auto9A9E7BAB_var < 0) { break; }
            auto9180D93B_g = UnitGroup(lp_unitType, auto9A9E7BAB_var, RegionEntireMap(), lp_unitFilter, 0);
            auto9180D93B_u = UnitGroupCount(auto9180D93B_g, c_unitCountAll);
            for (;; auto9180D93B_u -= 1) {
                auto9180D93B_var = UnitGroupUnitFromEnd(auto9180D93B_g, auto9180D93B_u);
                if (auto9180D93B_var == null) { break; }
                UnitAbilityRemove(auto9180D93B_var, lv_ability);
            }
        }
    }
}

void lib966DE777_gf_ApplyCCBehaviortoUnit (string lp_contract, string lp_overrideBehavior, unit lp_unit, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy, bool lp_inverse) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPlayerGroup = lib966DE777_gv_cCEnemySide;

    // Implementation
    if ((lib966DE777_gf_CheckCCState(lp_contract, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideBehavior == null)) {
        lv_behavior = UserDataGetGameLink("ContingencyContracts", lp_contract, "Associated Behavior", 1);
    }
    else {
        lv_behavior = lp_overrideBehavior;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    if ((UnitFilterMatch(lp_unit, 1, lp_unitFilter) == true) && ((UnitGetType(lp_unit) == lp_unitType) || (lp_unitType == null)) && (PlayerGroupHasPlayer(lv_targetPlayerGroup, UnitGetOwner(lp_unit)) == true)) {
        if ((lp_inverse == false)) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }
        else {
            UnitBehaviorRemove(lp_unit, lv_behavior, 1);
        }
    }

}

void lib966DE777_gf_ApplyCCAbilitytoUnit (string lp_contract, string lp_overrideAbility, unit lp_unit, string lp_unitType, unitfilter lp_unitFilter, int lp_playerorEnemy, bool lp_inverse) {
    // Variable Declarations
    playergroup lv_targetPlayerGroup;
    string lv_ability;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetPlayerGroup = lib966DE777_gv_cCEnemySide;

    // Implementation
    if ((lib966DE777_gf_CheckCCState(lp_contract, lib966DE777_ge_CCCheckState_On) == false)) {
        return ;
    }

    if ((lp_overrideAbility == null)) {
        lv_ability = UserDataGetGameLink("ContingencyContracts", lp_contract, "Associated Ability", 1);
    }
    else {
        lv_ability = lp_overrideAbility;
    }
    lv_targetPlayerGroup = lib966DE777_gf_GetCCTargetPlayerGroup(lp_playerorEnemy);
    if ((UnitFilterMatch(lp_unit, 1, lp_unitFilter) == true) && ((UnitGetType(lp_unit) == lp_unitType) || (lp_unitType == null)) && (PlayerGroupHasPlayer(lv_targetPlayerGroup, UnitGetOwner(lp_unit)) == true)) {
        if ((lp_inverse == false)) {
            UnitAbilityAdd(lp_unit, lv_ability);
        }
        else {
            UnitAbilityRemove(lp_unit, lv_ability);
        }
    }

}

bool lib966DE777_gf_CheckCCState (string lp_contract, int lp_checkState) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_checkState == lib966DE777_ge_CCCheckState_On) && (UserDataGetInt("ContingencyContracts", lp_contract, "Toggle State", 1) == 1)) {
        return true;
    }

    if ((lp_checkState == lib966DE777_ge_CCCheckState_Available) && (UserDataGetInt("ContingencyContracts", lp_contract, "Availability", 1) == 1)) {
        return true;
    }

    return false;
}

void lib966DE777_gf_CCStartPriorityAction (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "CCStartPriorityAction");
}

void lib966DE777_gf_CCGameStart (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "CCGameStart");
}

void lib966DE777_gf_CCInitializePlayerSettings () {
    // Automatic Variable Declarations
    playergroup auto55DE5D2D_g;
    int auto55DE5D2D_var;

    // Implementation
    auto55DE5D2D_g = PlayerGroupAll();
    auto55DE5D2D_var = -1;
    while (true) {
        auto55DE5D2D_var = PlayerGroupNextPlayer(auto55DE5D2D_g, auto55DE5D2D_var);
        if (auto55DE5D2D_var < 0) { break; }
        PlayerOptionOverride(auto55DE5D2D_var, "selectuncontrolable", "1");
        PlayerOptionOverride(auto55DE5D2D_var, "simplecommandcard", "0");
    }
}

void lib966DE777_gf_PopulateContractbtns (string lp_class, int lp_classID) {
    // Variable Declarations
    int lv_iterateID;
    int lv_iterateX;
    int lv_iterateY;
    string lv_ccinstance;

    // Automatic Variable Declarations
    const int autoDADF8C8D_ae = 30;
    const int autoDADF8C8D_ai = 1;
    const int autoAEA6A723_ae = 20;
    const int autoAEA6A723_ai = 1;

    // Variable Initialization
    lv_iterateID = 1;
    lv_iterateX = 100;
    lv_iterateY = 450;

    // Implementation
    if ((lp_classID == 0)) {
        return ;
    }

    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, 800, 50, c_anchorTopLeft, lv_iterateX, 400, StringExternal("Param/Value/lib_966DE777_22853875"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib966DE777_gv_cCOtherLabels[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, 800, 50, c_anchorTopLeft, lv_iterateX, 800, StringExternal("Param/Value/lib_966DE777_B6E75361"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib966DE777_gv_cCOtherLabels[2] = DialogControlLastCreated();
    lv_iterateID = 1;
    for ( ; ( (autoDADF8C8D_ai >= 0 && lv_iterateID <= autoDADF8C8D_ae) || (autoDADF8C8D_ai < 0 && lv_iterateID >= autoDADF8C8D_ae) ) ; lv_iterateID += autoDADF8C8D_ai ) {
        lv_ccinstance = UserDataGetUserInstance("ContingencyContractClasses", lp_class, "Contracts", lv_iterateID);
        lib966DE777_gf_CreateCCbtn(lv_ccinstance, lp_classID, lv_iterateID, lv_iterateX, lv_iterateY);
        if ((lv_iterateY < 700)) {
            lv_iterateY += 50;
        }
        else {
            lv_iterateY = 450;
            lv_iterateX += 400;
        }
    }
    lv_iterateX = 100;
    lv_iterateY = 850;
    lv_iterateID = 1;
    for ( ; ( (autoAEA6A723_ai >= 0 && lv_iterateID <= autoAEA6A723_ae) || (autoAEA6A723_ai < 0 && lv_iterateID >= autoAEA6A723_ae) ) ; lv_iterateID += autoAEA6A723_ai ) {
        lv_ccinstance = UserDataGetUserInstance("ContingencyContractClasses", lp_class, "Supports", lv_iterateID);
        lib966DE777_gf_CreateCCbtn(lv_ccinstance, lp_classID, (lv_iterateID + 50), lv_iterateX, lv_iterateY);
        if ((lv_iterateY < 1000)) {
            lv_iterateY += 50;
        }
        else {
            lv_iterateY = 850;
            lv_iterateX += 400;
        }
    }
}

void lib966DE777_gf_PopulateClassbtns () {
    // Variable Declarations
    int lv_iterateID;
    int lv_iterateX;
    int lv_iterateY;
    string lv_classinstance;

    // Automatic Variable Declarations
    string auto24D2E038_userType;
    int auto24D2E038_i;

    // Variable Initialization
    lv_iterateID = 1;
    lv_iterateX = 100;
    lv_iterateY = 250;

    // Implementation
    auto24D2E038_userType = "ContingencyContractClasses";
    auto24D2E038_i = 1;
    for ( ; auto24D2E038_i <= UserDataInstanceCount(auto24D2E038_userType) ; auto24D2E038_i += 1 ) {
        lv_classinstance = UserDataInstance(auto24D2E038_userType, auto24D2E038_i);
        if ((UserDataGetInt("ContingencyContractClasses", lv_classinstance, "Enabled", 1) == 1)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 100, c_anchorTopLeft, lv_iterateX, lv_iterateY, UserDataGetText("ContingencyContractClasses", lv_classinstance, "Tooltip", 1), UserDataGetText("ContingencyContractClasses", lv_classinstance, "Name", 1), "");
            lib966DE777_gv_cCClassBtn[lv_iterateID] = DialogControlLastCreated();
            lv_iterateX += 400;
        }

        lv_iterateID += 1;
    }
}

void lib966DE777_gf_ClearContractBtns () {
    // Variable Declarations
    int lv_iterate;
    int lv_iterate2;

    // Automatic Variable Declarations
    const int auto4290D920_ae = 10;
    const int auto4290D920_ai = 1;
    const int auto9D3638E3_ae = 70;
    const int auto9D3638E3_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlDestroy(lib966DE777_gv_cCOtherLabels[1]);
    DialogControlDestroy(lib966DE777_gv_cCOtherLabels[2]);
    lv_iterate = 1;
    for ( ; ( (auto4290D920_ai >= 0 && lv_iterate <= auto4290D920_ae) || (auto4290D920_ai < 0 && lv_iterate >= auto4290D920_ae) ) ; lv_iterate += auto4290D920_ai ) {
        lv_iterate2 = 1;
        for ( ; ( (auto9D3638E3_ai >= 0 && lv_iterate2 <= auto9D3638E3_ae) || (auto9D3638E3_ai < 0 && lv_iterate2 >= auto9D3638E3_ae) ) ; lv_iterate2 += auto9D3638E3_ai ) {
            DialogControlDestroy(lib966DE777_gv_cCContractBtn[lv_iterate][lv_iterate2]);
        }
    }
}

void lib966DE777_gf_CreateCCbtn (string lp_cCInstance, int lp_classID, int lp_listID, int lp_offsetX, int lp_offsetY) {
    // Variable Declarations
    text lv_contractdescription;
    text lv_contractname;

    // Automatic Variable Declarations
    int auto2DDA491C_val;

    // Variable Initialization

    // Implementation
    if ((UserDataGetInt("ContingencyContracts", lp_cCInstance, "Availability", 1) == 0)) {
        return ;
    }

    lv_contractname = UserDataGetText("ContingencyContracts", lp_cCInstance, "Contract Name", 1);
    lv_contractdescription = UserDataGetText("ContingencyContracts", lp_cCInstance, "Description", 1);
    lib966DE777_gf_ProcessContractSpecialFlags(lp_cCInstance);
    if ((UserDataGetInt("ContingencyContracts", lp_cCInstance, "Contract Type", 1) == 2)) {
        libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, 300, 50, c_anchorTopLeft, (lp_offsetX + 0), lp_offsetY, lv_contractdescription, ColorWithAlpha(0,0,0,0), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemButton(lib966DE777_gv_cCDialogue, 300, 50, c_anchorTopLeft, lp_offsetX, lp_offsetY, lv_contractdescription, (lv_contractname + StringExternal("Param/Value/lib_966DE777_8FEE750C") + IntToText(UserDataGetInt("ContingencyContracts", lp_cCInstance, "Contract Level", 1))), "");
    }
    lib966DE777_gv_cCContractBtn[lp_classID][lp_listID] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CC_ContractName", PlayerGroupAll());
    lib966DE777_gv_cCContractList[lp_classID][lp_listID] = lp_cCInstance;
    auto2DDA491C_val = UserDataGetInt("ContingencyContracts", lp_cCInstance, "Toggle State", 1);
    if (auto2DDA491C_val == 0) {
        lib966DE777_gf_HighlightCCButton(lib966DE777_gv_cCContractBtn[lp_classID][lp_listID], false);
    }
    else if (auto2DDA491C_val == 1) {
        lib966DE777_gf_HighlightCCButton(lib966DE777_gv_cCContractBtn[lp_classID][lp_listID], true);
    }
    else if (auto2DDA491C_val == -1) {
        DialogControlSetEnabled(lib966DE777_gv_cCContractBtn[lp_classID][lp_listID], PlayerGroupAll(), false);
    }
    else {
    }
}

void lib966DE777_gf_CCApplyUnitCategoryIdentifier (unit lp_unit, string lp_identifierBehavior, string lp_category, unitfilter lp_unitFilter) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitFilterMatch(lp_unit, 1, lp_unitFilter) == true)) {
        if ((lib966DE777_gf_CCUnitisCategory(UnitGetType(lp_unit), lp_category) == true)) {
            UnitBehaviorAdd(lp_unit, lp_identifierBehavior, lp_unit, 1);
        }

    }

}

void lib966DE777_gf_CCIterateChecks () {
    // Variable Declarations
    string lv_cciterate;

    // Automatic Variable Declarations
    string auto7E8F942C_userType;
    int auto7E8F942C_i;

    // Variable Initialization

    // Implementation
    auto7E8F942C_userType = "ContingencyContracts";
    auto7E8F942C_i = 1;
    for ( ; auto7E8F942C_i <= UserDataInstanceCount(auto7E8F942C_userType) ; auto7E8F942C_i += 1 ) {
        lv_cciterate = UserDataInstance(auto7E8F942C_userType, auto7E8F942C_i);
        if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Toggle State", 1) == -1)) {
            lib966DE777_gf_ModifyCCData(lv_cciterate, 0, 99);
        }

        lib966DE777_gf_ProcessContractSpecialFlags(lv_cciterate);
        lib966DE777_gf_ProcessContractRequirements(lv_cciterate);
        if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Special Flags", 2) != 0) && (UserDataGetInt("ContingencyContracts", lv_cciterate, "Special Flags", 2) != lib966DE777_gv_cCCurrentTopbarType)) {
            if ((lib966DE777_gf_CheckCCState(lv_cciterate, lib966DE777_ge_CCCheckState_On) == true)) {
                lib966DE777_gv_cCUpdateToggledOffContracts += 1;
                lib966DE777_gf_ModifyCCData(lv_cciterate, 0, 99);
            }

        }

    }
}

void lib966DE777_gf_ProcessContractSpecialFlags (string lp_cCInstance) {
    // Automatic Variable Declarations
    int auto42124810_val;

    // Implementation
    auto42124810_val = UserDataGetInt("ContingencyContracts", lp_cCInstance, "Special Flags", 1);
    if (auto42124810_val == 1) {
        if ((lib966DE777_gv_cCRewardPool > lib966DE777_gv_cCRewardFund)) {
            if ((lib966DE777_gf_CheckCCState(lp_cCInstance, lib966DE777_ge_CCCheckState_On) == true)) {
                lib966DE777_gv_cCUpdateToggledOffContracts += 1;
            }

            lib966DE777_gf_ModifyCCData(lp_cCInstance, -1, 99);
        }
        else {
            if ((lib966DE777_gf_CheckCCState(lp_cCInstance, lib966DE777_ge_CCCheckState_On) == false)) {
                lib966DE777_gf_ModifyCCData(lp_cCInstance, 0, 99);
            }

        }
    }
    else {
    }
}

void lib966DE777_gf_ProcessContractRequirements (string lp_cCInstance) {
    // Variable Declarations
    int lv_iterator;
    string lv_requirecontract;

    // Automatic Variable Declarations
    const int autoBBDC9153_ae = 5;
    const int autoBBDC9153_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iterator = 1;
    for ( ; ( (autoBBDC9153_ai >= 0 && lv_iterator <= autoBBDC9153_ae) || (autoBBDC9153_ai < 0 && lv_iterator >= autoBBDC9153_ae) ) ; lv_iterator += autoBBDC9153_ai ) {
        lv_requirecontract = UserDataGetUserInstance("ContingencyContracts", lp_cCInstance, "Require Contracts", lv_iterator);
        if ((UserDataGetInt("ContingencyContracts", lv_requirecontract, "Availability", 1) == 1)) {
            if ((UserDataGetInt("ContingencyContracts", lv_requirecontract, "Toggle State", 1) == 1)) {
                lib966DE777_gf_ProcessContractRequirements(lv_requirecontract);
            }

            if ((UserDataGetInt("ContingencyContracts", lv_requirecontract, "Toggle State", 1) < 1)) {
                if ((lib966DE777_gf_CheckCCState(lp_cCInstance, lib966DE777_ge_CCCheckState_On) == true)) {
                    lib966DE777_gv_cCUpdateToggledOffContracts += 1;
                }

                lib966DE777_gf_ModifyCCData(lp_cCInstance, -1, 99);
                return ;
            }

        }

    }
}

void lib966DE777_gf_CreateCCDialogueStats () {
    // Variable Declarations
    int lv_xsize;
    int lv_offsetX;
    int lv_offsetY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xsize = 600;
    lv_offsetX = 100;
    lv_offsetY = 75;

    // Implementation
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTopLeft, lv_offsetX, lv_offsetY, StringExternal("Param/Value/lib_966DE777_60062605"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_offsetY += 50;
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTopLeft, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_53FCE9E7") + IntToText(lib966DE777_gv_cCRewardFund) + StringExternal("Param/Value/lib_966DE777_13CA0836") + IntToText(lib966DE777_gv_cCRewardPool)), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib966DE777_gv_cCStatLabels[1] = DialogControlLastCreated();
    lv_offsetY += 25;
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTopLeft, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_74B5F998") + IntToText(lib966DE777_gv_cCExpendFund) + StringExternal("Param/Value/lib_966DE777_5559506C") + IntToText(lib966DE777_gv_cCFundAvailable)), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib966DE777_gv_cCStatLabels[2] = DialogControlLastCreated();
    lv_offsetY += 25;
    if ((lib966DE777_gv_cCRewardPoolProtoss > 0)) {
        libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTopLeft, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_07C16D77") + IntToText(lib966DE777_gv_cCRewardProtoss) + StringExternal("Param/Value/lib_966DE777_6EB8DC61") + IntToText(lib966DE777_gv_cCRewardPoolProtoss)), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib966DE777_gv_cCStatLabels[3] = DialogControlLastCreated();
    }

    lv_offsetY += 25;
    if ((lib966DE777_gv_cCRewardPoolZerg > 0)) {
        libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTopLeft, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_FD10B107") + IntToText(lib966DE777_gv_cCRewardZerg) + StringExternal("Param/Value/lib_966DE777_C114CDFE") + IntToText(lib966DE777_gv_cCRewardPoolZerg)), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib966DE777_gv_cCStatLabels[4] = DialogControlLastCreated();
    }

    lv_offsetY = 75;
    lv_offsetX = 0;
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTop, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_1C8A37C4") + IntToText(lib966DE777_gv_cCTotalContingencyLevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceButtonText", PlayerGroupAll());
    lib966DE777_gv_cCStatLabels[7] = DialogControlLastCreated();
    lv_offsetY += 75;
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, lv_xsize, 50, c_anchorTop, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_7658BF1B") + IntToText(lib966DE777_gv_cCTotalSupportLevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceButtonText", PlayerGroupAll());
    lib966DE777_gv_cCStatLabels[8] = DialogControlLastCreated();
    lv_offsetY -= 30;
    lv_offsetX += 75;
    libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, 300, 25, c_anchorTop, lv_offsetX, lv_offsetY, (StringExternal("Param/Value/lib_966DE777_DFECA243") + IntToText(lib966DE777_gv_cCMinContingencyLevel)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AB_Description", PlayerGroupAll());
    lib966DE777_gv_cCStatLabels[9] = DialogControlLastCreated();
}

void lib966DE777_gf_HighlightCCButton (int lp_button, bool lp_on) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_on == true)) {
        libNtve_gf_SetDialogItemImage2(lp_button, "Assets\\Textures\\ui_generic_button_normaloverpressedover_zerg.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lp_button, "Assets\\Textures\\ui_generic_button_normaloverpressedover_zerg.dds", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage2(lp_button, "Assets\\Textures\\ui_generic_button_normaloverpressedover.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lp_button, "Assets\\Textures\\ui_generic_button_normalpressed.dds", PlayerGroupAll());
    }
}

void lib966DE777_gf_ModifyCCData (string lp_cCInstance, int lp_toggleState, int lp_availability) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_toggleState != 99)) {
        UserDataSetInt("ContingencyContracts", lp_cCInstance, "Toggle State", 1, lp_toggleState);
    }

    if ((lp_availability != 99)) {
        UserDataSetInt("ContingencyContracts", lp_cCInstance, "Availability", 1, lp_availability);
    }

}

void lib966DE777_gf_ToggleContract (string lp_contract) {
    // Variable Declarations
    int lv_iterator;
    string lv_cCiterator;

    // Automatic Variable Declarations
    int auto550F83F3_val;
    const int auto39F98D84_ae = 5;
    const int auto39F98D84_ai = 1;
    string auto1B81855A_userType;
    int auto1B81855A_i;

    // Variable Initialization

    // Implementation
    auto550F83F3_val = UserDataGetInt("ContingencyContracts", lp_contract, "Toggle State", 1);
    if (auto550F83F3_val == 0) {
        lib966DE777_gf_ModifyCCData(lp_contract, 1, 99);
        lv_iterator = 1;
        for ( ; ( (auto39F98D84_ai >= 0 && lv_iterator <= auto39F98D84_ae) || (auto39F98D84_ai < 0 && lv_iterator >= auto39F98D84_ae) ) ; lv_iterator += auto39F98D84_ai ) {
            if ((UserDataGetInt("ContingencyContracts", UserDataGetUserInstance("ContingencyContracts", lp_contract, "Turnoff Contracts", lv_iterator), "Toggle State", 1) == 1)) {
                lib966DE777_gf_ModifyCCData(UserDataGetUserInstance("ContingencyContracts", lp_contract, "Turnoff Contracts", lv_iterator), 0, 99);
                lib966DE777_gv_cCUpdateToggledOffContracts += 1;
            }

        }
        if ((UserDataGetInt("ContingencyContracts", lp_contract, "Special Flags", 3) == 1)) {
            auto1B81855A_userType = "ContingencyContracts";
            auto1B81855A_i = 1;
            for ( ; auto1B81855A_i <= UserDataInstanceCount(auto1B81855A_userType) ; auto1B81855A_i += 1 ) {
                lv_cCiterator = UserDataInstance(auto1B81855A_userType, auto1B81855A_i);
                if ((UserDataGetInt("ContingencyContracts", lv_cCiterator, "Special Flags", 3) == 1) && (UserDataGetInt("ContingencyContracts", lv_cCiterator, "Toggle State", 1) == 1) && (lv_cCiterator != lp_contract)) {
                    lib966DE777_gf_ModifyCCData(lv_cCiterator, 0, 99);
                    lib966DE777_gv_cCUpdateToggledOffContracts += 1;
                }

            }
        }

    }
    else if (auto550F83F3_val == 1) {
        lib966DE777_gf_ModifyCCData(lp_contract, 0, 99);
    }
    else {
    }
    if ((UserDataGetInt("ContingencyContracts", lp_contract, "Special Flags", 2) != 0)) {
        lib966DE777_gv_cCCurrentTopbarType = UserDataGetInt("ContingencyContracts", lp_contract, "Special Flags", 2);
    }

    lib966DE777_gf_ClearContractBtns();
    lib966DE777_gf_CCIterateChecks();
    lib966DE777_gf_TallyContracts();
    lib966DE777_gf_PopulateContractbtns(UserDataInstance("ContingencyContractClasses", lib966DE777_gv_cCCurrentClass), lib966DE777_gv_cCCurrentClass);
    lib966DE777_gf_RefreshCCStats();
    lib966DE777_gf_CheckCCStartCondition();
}

void lib966DE777_gf_TallyContracts () {
    // Variable Declarations
    string lv_cciterate;
    int lv_cciteratelevel;
    int lv_contingencyLevel;
    int lv_supportLevel;
    int lv_rewardfunds;
    int lv_rewardProtossResearch;
    int lv_rewardZergResearch;
    int lv_expendfunds;
    int lv_expendprotoss;
    int lv_expendzerg;

    // Automatic Variable Declarations
    string auto62A9288B_userType;
    int auto62A9288B_i;
    int auto27C39BE6_val;
    int autoE5B9BB40_val;

    // Variable Initialization

    // Implementation
    auto62A9288B_userType = "ContingencyContracts";
    auto62A9288B_i = 1;
    for ( ; auto62A9288B_i <= UserDataInstanceCount(auto62A9288B_userType) ; auto62A9288B_i += 1 ) {
        lv_cciterate = UserDataInstance(auto62A9288B_userType, auto62A9288B_i);
        if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Toggle State", 1) == 1)) {
            lv_cciteratelevel = UserDataGetInt("ContingencyContracts", lv_cciterate, "Contract Level", 1);
            if ((UserDataGetInt("ContingencyContracts", lv_cciterate, "Contract Type", 1) == 1)) {
                lv_supportLevel += lv_cciteratelevel;
                autoE5B9BB40_val = UserDataGetInt("ContingencyContracts", lv_cciterate, "Research Type", 1);
                if (autoE5B9BB40_val == 0) {
                    lv_expendfunds += (lib966DE777_gv_fUNDS_PER_LEVEL * lv_cciteratelevel);
                }
                else if (autoE5B9BB40_val == 1) {
                    lv_rewardProtossResearch -= lv_cciteratelevel;
                }
                else if (autoE5B9BB40_val == 2) {
                    lv_rewardZergResearch -= lv_cciteratelevel;
                }
                else {
                }
            }
            else {
                lv_contingencyLevel += lv_cciteratelevel;
                auto27C39BE6_val = UserDataGetInt("ContingencyContracts", lv_cciterate, "Research Type", 1);
                if (auto27C39BE6_val == 0) {
                    lv_rewardfunds += (lib966DE777_gv_fUNDS_PER_LEVEL * lv_cciteratelevel);
                }
                else if (auto27C39BE6_val == 1) {
                    lv_rewardProtossResearch += lv_cciteratelevel;
                }
                else if (auto27C39BE6_val == 2) {
                    lv_rewardZergResearch += lv_cciteratelevel;
                }
                else {
                }
            }
        }

    }
    if ((lib966DE777_gf_CheckCCState("Dec_Discount", lib966DE777_ge_CCCheckState_On) == true)) {
        lv_expendfunds *= 3;
        lv_expendfunds /= 4;
    }

    lib966DE777_gv_cCExpendFund = lv_expendfunds;
    lib966DE777_gv_cCRewardFund = lv_rewardfunds;
    lib966DE777_gv_cCRewardProtoss = lv_rewardProtossResearch;
    lib966DE777_gv_cCRewardZerg = lv_rewardZergResearch;
    lib966DE777_gv_cCTotalContingencyLevel = lv_contingencyLevel;
    lib966DE777_gv_cCTotalSupportLevel = lv_supportLevel;
}

void lib966DE777_gf_RefreshCCStats () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[1], (StringExternal("Param/Value/lib_966DE777_6B82C9D2") + IntToText(lib966DE777_gv_cCRewardFund) + StringExternal("Param/Value/lib_966DE777_ABEDFF7C") + IntToText(lib966DE777_gv_cCRewardPool)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[2], (StringExternal("Param/Value/lib_966DE777_BDB3F1C5") + IntToText(lib966DE777_gv_cCExpendFund) + StringExternal("Param/Value/lib_966DE777_D8B2C4AC") + IntToText(lib966DE777_gv_cCFundAvailable)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[3], (StringExternal("Param/Value/lib_966DE777_25ECF665") + IntToText(lib966DE777_gv_cCRewardProtoss) + StringExternal("Param/Value/lib_966DE777_25FBFD14") + IntToText(lib966DE777_gv_cCRewardPoolProtoss)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[4], (StringExternal("Param/Value/lib_966DE777_498C2414") + IntToText(lib966DE777_gv_cCRewardZerg) + StringExternal("Param/Value/lib_966DE777_E5486462") + IntToText(lib966DE777_gv_cCRewardPoolZerg)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[7], (StringExternal("Param/Value/lib_966DE777_24ECCF71") + IntToText(lib966DE777_gv_cCTotalContingencyLevel)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib966DE777_gv_cCStatLabels[8], (StringExternal("Param/Value/lib_966DE777_730E8A63") + IntToText(lib966DE777_gv_cCTotalSupportLevel)), PlayerGroupAll());
    DialogControlDestroy(lib966DE777_gv_cCStatLabels[10]);
    if ((lib966DE777_gv_cCUpdateToggledOffContracts >= 1)) {
        libNtve_gf_CreateDialogItemLabel(lib966DE777_gv_cCDialogue, 600, 50, c_anchorTop, 0, 200, (IntToText(lib966DE777_gv_cCUpdateToggledOffContracts) + StringExternal("Param/Value/lib_966DE777_AE30AA85")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ABChoiceDescription", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
        lib966DE777_gv_cCStatLabels[10] = DialogControlLastCreated();
        lib966DE777_gv_cCUpdateToggledOffContracts = 0;
    }

}

void lib966DE777_gf_CheckCCStartCondition () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib966DE777_gv_cCExpendFund > lib966DE777_gv_cCFundAvailable)) {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[2], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[2], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }
    if ((lib966DE777_gv_cCRewardProtoss < 0)) {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[3], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[3], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }
    if ((lib966DE777_gv_cCRewardZerg < 0)) {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[4], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemColor(lib966DE777_gv_cCStatLabels[4], ColorWithAlpha(0,0,0,0), PlayerGroupAll());
    }
    if ((lib966DE777_gv_cCTotalContingencyLevel < lib966DE777_gv_cCMinContingencyLevel)) {
        libNtve_gf_SetDialogItemTooltip(lib966DE777_gv_cCStartBtn, StringExternal("Param/Value/lib_966DE777_24B90C2D"), PlayerGroupAll());
        DialogControlSetEnabled(lib966DE777_gv_cCStartBtn, PlayerGroupAll(), false);
    }
    else {
        if (((lib966DE777_gv_cCExpendFund > lib966DE777_gv_cCFundAvailable) || (lib966DE777_gv_cCRewardProtoss < 0) || (lib966DE777_gv_cCRewardZerg < 0))) {
            libNtve_gf_SetDialogItemTooltip(lib966DE777_gv_cCStartBtn, StringExternal("Param/Value/lib_966DE777_00025AF7"), PlayerGroupAll());
            DialogControlSetEnabled(lib966DE777_gv_cCStartBtn, PlayerGroupAll(), false);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(lib966DE777_gv_cCStartBtn, lib966DE777_gv_cCStartGameTxt, PlayerGroupAll());
            DialogControlSetEnabled(lib966DE777_gv_cCStartBtn, PlayerGroupAll(), true);
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Faction Swap Player Unit
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_FactionSwapPlayerUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_CCFactionSwapUnit(EventUnit(), lib966DE777_gv_cCPlayerFactionIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_FactionSwapPlayerUnit_Init () {
    lib966DE777_gt_FactionSwapPlayerUnit = TriggerCreate("lib966DE777_gt_FactionSwapPlayerUnit_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_FactionSwapPlayerUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "CCFactionSwapPlayerUnitDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: !fatal
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_fatal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_FatalImpact(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_fatal_Init () {
    lib966DE777_gt_fatal = TriggerCreate("lib966DE777_gt_fatal_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_fatal, c_playerAny, "!fatal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !random
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_random_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3CCE82D4_g;
    int auto3CCE82D4_u;
    unit auto3CCE82D4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3CCE82D4_g = UnitGroupSelected(EventPlayer());
    auto3CCE82D4_u = UnitGroupCount(auto3CCE82D4_g, c_unitCountAll);
    for (;; auto3CCE82D4_u -= 1) {
        auto3CCE82D4_var = UnitGroupUnitFromEnd(auto3CCE82D4_g, auto3CCE82D4_u);
        if (auto3CCE82D4_var == null) { break; }
        lib966DE777_gf_CCApplyRandomizetoUnit(auto3CCE82D4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_random_Init () {
    lib966DE777_gt_random = TriggerCreate("lib966DE777_gt_random_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_random, c_playerAny, "!random", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !ccdebug
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_ccdebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "!ccdebug"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "off")) {
        lib966DE777_gv_ccdebug = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_C93890D8"));
    }
    else {
        lib966DE777_gv_ccdebug = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_376D0EA9"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_ccdebug_Init () {
    lib966DE777_gt_ccdebug = TriggerCreate("lib966DE777_gt_ccdebug_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_ccdebug, c_playerAny, "!ccdebug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !ccmenu
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_ccmenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib966DE777_gv_cCResearchTypeInitialized == false)) {
        lib966DE777_gf_InitializeResearchType(lib966DE777_ge_CCResearchType_Both);
    }

    TriggerExecute(lib966DE777_gt_InitializeCCMenu, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_ccmenu_Init () {
    lib966DE777_gt_ccmenu = TriggerCreate("lib966DE777_gt_ccmenu_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_ccmenu, c_playerAny, "!ccmenu", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !bonuscomplete
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_bonuscomplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_1905AF2C"));
    lib966DE777_gf_SendBonusObjectivesCompletionEvent();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_bonuscomplete_Init () {
    lib966DE777_gt_bonuscomplete = TriggerCreate("lib966DE777_gt_bonuscomplete_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_bonuscomplete, c_playerAny, "!bonuscomplete", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !cctopbar
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_cctopbar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib966DE777_gt_CreateCCTopbar, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_cctopbar_Init () {
    lib966DE777_gt_cctopbar = TriggerCreate("lib966DE777_gt_cctopbar_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_cctopbar, c_playerAny, "!cctopbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: !raceswap
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_raceswap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_race;

    // Automatic Variable Declarations
    unitgroup auto79336727_g;
    int auto79336727_u;
    unit auto79336727_var;

    // Variable Initialization
    lv_race = StringToInt(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "!raceswap"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto79336727_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79336727_u = UnitGroupCount(auto79336727_g, c_unitCountAll);
    for (;; auto79336727_u -= 1) {
        auto79336727_var = UnitGroupUnitFromEnd(auto79336727_g, auto79336727_u);
        if (auto79336727_var == null) { break; }
        lib966DE777_gf_CCFactionSwapUnit(auto79336727_var, lv_race);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_raceswap_Init () {
    lib966DE777_gt_raceswap = TriggerCreate("lib966DE777_gt_raceswap_Func");
    TriggerAddEventChatMessage(lib966DE777_gt_raceswap, c_playerAny, "!raceswap", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: All Bonus Objective Complete
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_AllBonusObjectiveComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4FA93179_g;
    int auto4FA93179_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FA93179_g = PlayerGroupAll();
    auto4FA93179_var = -1;
    while (true) {
        auto4FA93179_var = PlayerGroupNextPlayer(auto4FA93179_g, auto4FA93179_var);
        if (auto4FA93179_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto4FA93179_var, "CCAllBonusObjectivesComplete", 1);
    }
    if ((lib966DE777_gf_CheckCCState("Fatal", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gf_FatalImpact(PlayerGroupPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_AllBonusObjectiveComplete_Init () {
    lib966DE777_gt_AllBonusObjectiveComplete = TriggerCreate("lib966DE777_gt_AllBonusObjectiveComplete_Func");
    lib966DE777_gf_AllBonusObjectivesComplete(lib966DE777_gt_AllBonusObjectiveComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Ground Unit
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_RandomizeGroundUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tier;
    fixed lv_baseunitsupply;
    fixed lv_replaceunitsupply;
    fixed lv_unitrandomzievalue;
    unit lv_replacedunit;
    string lv_supplybehavior;
    int lv_supplybehaviorstacks;

    // Automatic Variable Declarations
    const int autoFD9685CA_n = 5;
    int autoFD9685CA_i;

    // Variable Initialization
    lv_baseunitsupply = UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
    lv_unitrandomzievalue = (UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene));
    lv_supplybehavior = "CCSupplyuse0p5";

    // Conditions
    if (testConds) {
        if (!(((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)) >= 25.0))) {
            return false;
        }

        if (!(((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)) < 1200.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoFD9685CA_i = 1; autoFD9685CA_i <= autoFD9685CA_n; autoFD9685CA_i += 1) {
        lv_unitrandomzievalue *= RandomFixed(lib966DE777_gv_randomizecostlowerbound, lib966DE777_gv_randomizecostupperbound);
    }
    lv_unitrandomzievalue *= 0.95;
    lv_tier = FixedToInt((lv_unitrandomzievalue / 25.0));
    lv_tier = MinI(MaxI(lv_tier, 1), 36);
    lv_replacedunit = lib966DE777_gf_RandomizerReplaceUnitGround(lv_tier, EventUnit(), false);
    lv_replaceunitsupply = UnitTypeGetProperty(UnitGetType(lv_replacedunit), c_unitPropSuppliesUsed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_RandomizeGroundUnit_Init () {
    lib966DE777_gt_RandomizeGroundUnit = TriggerCreate("lib966DE777_gt_RandomizeGroundUnit_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_RandomizeGroundUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "CCRandomizeGroundDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Randomize Air Unit
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_RandomizeAirUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tier;
    fixed lv_baseunitsupply;
    fixed lv_replaceunitsupply;
    fixed lv_unitrandomzievalue;
    unit lv_replacedunit;
    string lv_supplybehavior;
    int lv_supplybehaviorstacks;

    // Automatic Variable Declarations
    const int autoDAE043BF_n = 5;
    int autoDAE043BF_i;

    // Variable Initialization
    lv_baseunitsupply = UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
    lv_unitrandomzievalue = (UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene));
    lv_supplybehavior = "CCSupplyuse0p5";

    // Conditions
    if (testConds) {
        if (!(((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)) >= 25.0))) {
            return false;
        }

        if (!(((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) + UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene)) < 1500.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoDAE043BF_i = 1; autoDAE043BF_i <= autoDAE043BF_n; autoDAE043BF_i += 1) {
        lv_unitrandomzievalue *= RandomFixed(lib966DE777_gv_randomizecostlowerbound, lib966DE777_gv_randomizecostupperbound);
    }
    lv_unitrandomzievalue *= 0.95;
    lv_tier = FixedToInt(((lv_unitrandomzievalue / 50.0) - 1.0));
    lv_tier = MinI(MaxI(lv_tier, 1), 23);
    lv_replacedunit = lib966DE777_gf_RandomizerReplaceUnitAir(lv_tier, EventUnit(), false);
    lv_replaceunitsupply = UnitTypeGetProperty(UnitGetType(lv_replacedunit), c_unitPropSuppliesUsed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_RandomizeAirUnit_Init () {
    lib966DE777_gt_RandomizeAirUnit = TriggerCreate("lib966DE777_gt_RandomizeAirUnit_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_RandomizeAirUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "CCRandomizeAirDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Production Ban Activate
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCProductionBanActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_trainType;
    int lv_iterate;
    bool lv_tallied;

    // Automatic Variable Declarations
    const int auto94E17DD2_ae = 4;
    const int auto94E17DD2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainType = lib966DE777_gf_CCGetProgressUnitCategory(libNtve_gf_TriggeringProgressUnitType());
    if ((lv_trainType == null)) {
        lib966DE777_gf_CCdebugmessage(StringExternal("Param/Value/lib_966DE777_DEADFF35"));
        return true;
    }

    lv_iterate = 0;
    for ( ; ( (auto94E17DD2_ai >= 0 && lv_iterate <= auto94E17DD2_ae) || (auto94E17DD2_ai < 0 && lv_iterate >= auto94E17DD2_ae) ) ; lv_iterate += auto94E17DD2_ai ) {
        if ((lib966DE777_gv_productionExemptCategory[lv_iterate] != UserDataGetInt("CCTrainAbilityList", lv_trainType, "Category Flag", 1)) && (lib966DE777_gv_productionExemptCategory[lv_iterate] != -1)) {
        }
        else {
            lib966DE777_gv_productionExemptCategory[lv_iterate] = UserDataGetInt("CCTrainAbilityList", lv_trainType, "Category Flag", 1);
            lib966DE777_gv_productionCategoryCount = (lv_iterate + 1);
            lv_tallied = true;
        }
        if ((lib966DE777_gv_productionExemptType[lv_iterate] != null) && (lib966DE777_gv_productionExemptType[lv_iterate] != lv_trainType)) {
        }
        else {
            lib966DE777_gv_productionExemptType[lv_iterate] = lv_trainType;
            lib966DE777_gv_productionTypeCount = (lv_iterate + 1);
            lv_tallied = true;
        }
        if ((lv_tallied == true)) {
            break;
        }

    }
    lib966DE777_gf_CCdebugmessage((IntToText(lib966DE777_gv_productionCategoryCount) + IntToText(lib966DE777_gv_productionTypeCount)));
    if ((lv_tallied == true) && ((lib966DE777_gv_productionCategoryCount >= lib966DE777_gv_reqCategoryCount) || (lib966DE777_gv_productionTypeCount >= lib966DE777_gv_reqTypeCount))) {
        lib966DE777_gf_CCBanallProductionExcept();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCProductionBanActivate_Init () {
    lib966DE777_gt_CCProductionBanActivate = TriggerCreate("lib966DE777_gt_CCProductionBanActivate_Func");
    TriggerEnable(lib966DE777_gt_CCProductionBanActivate, false);
    TriggerAddEventUnitTrainProgress(lib966DE777_gt_CCProductionBanActivate, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create CC Topbar
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CreateCCTopbar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE1601C89_g;
    int autoE1601C89_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gv_cCTopbarCreated = 1;
    autoE1601C89_g = lib966DE777_gv_cCPlayerSide;
    autoE1601C89_var = -1;
    while (true) {
        autoE1601C89_var = PlayerGroupNextPlayer(autoE1601C89_g, autoE1601C89_var);
        if (autoE1601C89_var < 0) { break; }
        libNtve_gf_CreateUnitsAtPoint2(1, "CCTopbarInvisibleCaster", 0, autoE1601C89_var, PlayerStartLocation(autoE1601C89_var));
        lib966DE777_gv_cCTopbarUnit[autoE1601C89_var] = UnitLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CCGlobalCastingPanel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE1601C89_var), true);
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypePanel, "CCTopbar/CCPanelTemplate");
        lib966DE777_gv_cCTopbarPanel[autoE1601C89_var] = DialogControlLastCreated();
        DialogControlSetVisible(lib966DE777_gv_cCTopbarPanel[autoE1601C89_var], PlayerGroupSingle(autoE1601C89_var), true);
        DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeTooltip);
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
        DialogControlHookup(lib966DE777_gv_cCTopbarPanel[autoE1601C89_var], c_triggerControlTypePanel, "CCButtonHolder");
        DialogControlCreateInPanelFromTemplate(DialogControlLastCreated(), c_triggerControlTypeCommandPanel, "CCTopbar/CCCommandPanelTemplate");
        libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(lib966DE777_gv_cCTopbarUnit[autoE1601C89_var]), PlayerGroupSingle(autoE1601C89_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CreateCCTopbar_Init () {
    lib966DE777_gt_CreateCCTopbar = TriggerCreate("lib966DE777_gt_CreateCCTopbar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Topbar Ability Bullet Time
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_TopbarAbilityBulletTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedLocked(false);
    SoundPlayForPlayer(SoundLink("Sentry_GuardianShieldLaunch", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    GameSetSpeedValue(c_gameSpeedSlower);
    GameSetSpeedLocked(true);
    Wait(10.0, c_timeReal);
    GameSetSpeedLocked(false);
    SoundPlayForPlayer(SoundLink("Obelisk_TimeWarpImpact", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    lib966DE777_gf_CCGameSpeed();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_TopbarAbilityBulletTime_Init () {
    lib966DE777_gt_TopbarAbilityBulletTime = TriggerCreate("lib966DE777_gt_TopbarAbilityBulletTime_Func");
    TriggerAddEventUnitAbility(lib966DE777_gt_TopbarAbilityBulletTime, null, AbilityCommand("CCBulletTime", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Topbar Ability Salvage
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_TopbarAbilitySalvage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_refundMin;
    fixed lv_refundGas;
    text lv_refundMinText;
    text lv_refundGasText;
    int lv_refundTextTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_refundMin = (UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) * 0.5);
    lv_refundGas = (UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene) * 0.5);
    lv_refundMinText = StringToText("");
    lv_refundGasText = StringToText("");
    lv_refundTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_refundMinText = (StringExternal("Param/Value/lib_966DE777_7D4D4FC4") + FixedToText(lv_refundMin, 0) + StringExternal("Param/Value/lib_966DE777_2335A165"));
    lv_refundGasText = (StringExternal("Param/Value/lib_966DE777_6D16D961") + FixedToText(lv_refundGas, 0) + StringExternal("Param/Value/lib_966DE777_833AE1D8"));
    PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, lv_refundMin);
    PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, lv_refundGas);
    TextTagCreate((lv_refundMinText + StringExternal("Param/Value/lib_966DE777_E97BD643") + lv_refundGasText), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    lv_refundTextTag = TextTagLastCreated();
    Wait(1.5, c_timeGame);
    TextTagDestroy(lv_refundTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_TopbarAbilitySalvage_Init () {
    lib966DE777_gt_TopbarAbilitySalvage = TriggerCreate("lib966DE777_gt_TopbarAbilitySalvage_Func");
    TriggerAddEventUnitBehaviorChange(lib966DE777_gt_TopbarAbilitySalvage, null, "CCSalvageWarpout", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Drain
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_ResourceDrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trueMineralDrain;
    int lv_trueVespeneDrain;

    // Automatic Variable Declarations
    playergroup autoD837DF1D_g;
    int autoD837DF1D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD837DF1D_g = lib966DE777_gv_cCPlayerSide;
    autoD837DF1D_var = -1;
    while (true) {
        autoD837DF1D_var = PlayerGroupNextPlayer(autoD837DF1D_g, autoD837DF1D_var);
        if (autoD837DF1D_var < 0) { break; }
        lv_trueMineralDrain = MinI(lib966DE777_gv_mineralDrain, PlayerGetPropertyInt(autoD837DF1D_var, c_playerPropMinerals));
        lv_trueVespeneDrain = MinI(lib966DE777_gv_vespeneDrain, PlayerGetPropertyInt(autoD837DF1D_var, c_playerPropVespene));
        PlayerModifyPropertyInt(autoD837DF1D_var, c_playerPropMinerals, c_playerPropOperSubtract, lv_trueMineralDrain);
        PlayerModifyPropertyInt(autoD837DF1D_var, c_playerPropVespene, c_playerPropOperSubtract, lv_trueVespeneDrain);
        UIDisplayMessage(PlayerGroupSingle(autoD837DF1D_var), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_966DE777_B8F3388F") + IntToText(lv_trueMineralDrain) + StringExternal("Param/Value/lib_966DE777_714AC7E5") + IntToText(lv_trueVespeneDrain) + StringExternal("Param/Value/lib_966DE777_F2D4134C")));
    }
    TimerRestart(lib966DE777_gv_resourceDrainTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_ResourceDrain_Init () {
    lib966DE777_gt_ResourceDrain = TriggerCreate("lib966DE777_gt_ResourceDrain_Func");
    TriggerAddEventTimer(lib966DE777_gt_ResourceDrain, lib966DE777_gv_resourceDrainTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Collapse Manifestation
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_ApplyCollapseManifestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetGroup;
    unit lv_targetUnit;
    fixed lv_fundpool;

    // Automatic Variable Declarations
    playergroup auto922D8666_g;
    int auto922D8666_var;
    unitgroup auto665DA5F8_g;
    int auto665DA5F8_u;
    unit auto665DA5F8_var;

    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();
    lv_fundpool = lib966DE777_gv_collapsalpickfundpool;

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }

        if (!((lib966DE777_gf_CheckCCState("Collapsal", lib966DE777_ge_CCCheckState_On) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib966DE777_gv_cCTick025seconds >= 1800)) {
        if ((lib966DE777_gv_cCTick025seconds >= 3600)) {
            lv_fundpool *= 3.0;
        }
        else {
            lv_fundpool *= 2.0;
        }
    }
    else {
        if ((lib966DE777_gv_cCTick025seconds <= 480)) {
        }
        else {
            lv_fundpool *= 0.5;
        }
    }
    auto922D8666_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_EnemyExclusive);
    auto922D8666_var = -1;
    while (true) {
        auto922D8666_var = PlayerGroupNextPlayer(auto922D8666_g, auto922D8666_var);
        if (auto922D8666_var < 0) { break; }
        auto665DA5F8_g = UnitGroup(null, auto922D8666_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
        auto665DA5F8_u = UnitGroupCount(auto665DA5F8_g, c_unitCountAll);
        for (;; auto665DA5F8_u -= 1) {
            auto665DA5F8_var = UnitGroupUnitFromEnd(auto665DA5F8_g, auto665DA5F8_u);
            if (auto665DA5F8_var == null) { break; }
            if ((UnitWeaponCount(auto665DA5F8_var) >= 1) && (UnitHasBehavior2(auto665DA5F8_var, "CCCollapsal") == false) && (UnitGetPropertyFixed(auto665DA5F8_var, c_unitPropBaseMovementSpeed, c_unitPropCurrent) > 0.0)) {
                UnitGroupAdd(lv_targetGroup, auto665DA5F8_var);
            }

        }
    }
    while ((lv_fundpool > 0.0) && (UnitGroupCount(lv_targetGroup, c_unitCountAlive) > 0)) {
        lv_targetUnit = UnitGroupRandomUnit(lv_targetGroup, c_unitCountAlive);
        if ((UnitTypeGetCost(UnitGetType(lv_targetUnit), c_unitCostSumMineralsVespene) == 0)) {
            lv_fundpool -= (UnitGetPropertyFixed(lv_targetUnit, c_unitPropLife, c_unitPropCurrent) / 2.0);
        }
        else {
            lv_fundpool -= UnitTypeGetCost(UnitGetType(lv_targetUnit), c_unitCostSumMineralsVespene);
        }
        UnitGroupRemove(lv_targetGroup, lv_targetUnit);
        UnitBehaviorAdd(lv_targetUnit, "CCCollapsal", lv_targetUnit, 1);
        UnitBehaviorAdd(lv_targetUnit, "CCCollapsalWander", lv_targetUnit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_ApplyCollapseManifestation_Init () {
    lib966DE777_gt_ApplyCollapseManifestation = TriggerCreate("lib966DE777_gt_ApplyCollapseManifestation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surviver's Pact Veteran
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_SurviversPactVeteran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_SurviversPactApplyBuffs(UnitGetType(EventUnit()), EventPlayer(), "SurviversPact50");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_SurviversPactVeteran_Init () {
    lib966DE777_gt_SurviversPactVeteran = TriggerCreate("lib966DE777_gt_SurviversPactVeteran_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_SurviversPactVeteran, null, c_unitDamageTypeAny, c_unitDamageEither, "SurviversPactVeteranDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surviver's Pact Elite
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_SurviversPactElite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_SurviversPactApplyBuffs(UnitGetType(EventUnit()), EventPlayer(), "SurviversPact100");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_SurviversPactElite_Init () {
    lib966DE777_gt_SurviversPactElite = TriggerCreate("lib966DE777_gt_SurviversPactElite_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_SurviversPactElite, null, c_unitDamageTypeAny, c_unitDamageEither, "SurviversPactEliteDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surviver's Pact Ace
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_SurviversPactAce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_SurviversPactApplyBuffs(UnitGetType(EventUnit()), EventPlayer(), "SurviversPact200");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_SurviversPactAce_Init () {
    lib966DE777_gt_SurviversPactAce = TriggerCreate("lib966DE777_gt_SurviversPactAce_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_SurviversPactAce, null, c_unitDamageTypeAny, c_unitDamageEither, "SurviversPactAceDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Death Tally
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_UnitDeathTally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }

        if (!((libNtve_gf_PlayerInCinematicMode(EventPlayer()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!(((UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed) != 0.0) || (UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesMade) != 0.0) || (UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true)))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "SuicideRemove"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "SuicideRemoveNoShield"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gv_cCSuppliesLost += UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropSuppliesUsed);
    if ((lib966DE777_gf_CheckCCState("Deathless_3", lib966DE777_ge_CCCheckState_On) == true)) {
        ObjectiveSetName(DataTableGetObjective(true, "ObjDeathless"), (StringExternal("Param/Value/lib_966DE777_53E4FCF9") + IntToText(FixedToInt(lib966DE777_gv_cCDeathlessSupplyQuota)) + StringExternal("Param/Value/lib_966DE777_1A544D4F") + IntToText(FixedToInt(lib966DE777_gv_cCSuppliesLost)) + StringExternal("Param/Value/lib_966DE777_9CE76E30")));
        if ((lib966DE777_gv_cCSuppliesLost > lib966DE777_gv_cCDeathlessSupplyQuota)) {
            lib966DE777_gv_cC_GameStart = 0;
            SoundPlayForPlayer(SoundLink("UI_ObjectiveFailed", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 200.0, 0.0);
            ObjectiveSetState(DataTableGetObjective(true, "ObjDeathless"), c_objectiveStateFailed);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_F1A379D6"));
            Wait(3.0, c_timeReal);
            GameOver(1, c_gameOverDefeat, true, true);
        }

    }

    if ((lib966DE777_gf_CheckCCState("Deathless_5", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_cC_GameStart = 0;
        SoundPlayForPlayer(SoundLink("UI_ObjectiveFailed", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 200.0, 0.0);
        ObjectiveSetState(DataTableGetObjective(true, "ObjDeathless"), c_objectiveStateFailed);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_6095AD5D"));
        Wait(2.0, c_timeReal);
        GameOver(1, c_gameOverDefeat, true, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_UnitDeathTally_Init () {
    lib966DE777_gt_UnitDeathTally = TriggerCreate("lib966DE777_gt_UnitDeathTally_Func");
    TriggerAddEventUnitDied(lib966DE777_gt_UnitDeathTally, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Zerg Assault
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCZergAssault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_baseLocation;
    point lv_targetLocation;
    int lv_increment;
    unitgroup lv_assaultGroup;

    // Automatic Variable Declarations
    int auto9AEE5E2A_val;
    unitgroup auto94CAE8DD_g;
    int auto94CAE8DD_u;
    unit auto94CAE8DD_var;
    unitgroup auto5086A874_g;
    int auto5086A874_u;
    unit auto5086A874_var;
    unitgroup autoAD18BA6E_g;
    int autoAD18BA6E_u;
    unit autoAD18BA6E_var;
    unitgroup auto64C4A45A_g;
    int auto64C4A45A_u;
    unit auto64C4A45A_var;

    // Variable Initialization
    lv_assaultGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((lib966DE777_gv_cC_GameStart == 1) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lib966DE777_gf_GetPlayerPrimaryBaseLocation(0) != null))) {
        Wait(0.25, c_timeGame);
    }
    lib966DE777_gf_CCStartZergAssaultTimer();
    lv_baseLocation = lib966DE777_gf_GetPlayerPrimaryBaseLocation(0);
    if ((lib966DE777_gf_CheckCCState("PrimalDrop", lib966DE777_ge_CCCheckState_On) == true)) {
        do {
            lv_targetLocation = RegionRandomPoint(RegionCircle(lv_baseLocation, 10.0));
            lv_increment += 1;
        }while ((PointPathingPassable(lv_targetLocation) == true) && (RegionContainsPoint(RegionCircle(lv_baseLocation, 3.0), lv_targetLocation) == false) && (lv_increment <= 100));
        if ((lv_increment <= 100)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconAssaultPing", lv_targetLocation, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_63D1A2DA"));
            SoundPlayForPlayer(SoundLink("ZergDropPod_Drop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            auto9AEE5E2A_val = RandomInt(0, 2);
            if (auto9AEE5E2A_val == 0) {
                libNtve_gf_CreateUnitsWithDefaultFacing(20, "PrimalZergling", c_unitCreateIgnorePlacement, lib966DE777_gv_cCPrimaryEnemy, lv_targetLocation);
            }
            else if (auto9AEE5E2A_val == 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(6, "PrimalHydralisk", c_unitCreateIgnorePlacement, lib966DE777_gv_cCPrimaryEnemy, lv_targetLocation);
            }
            else if (auto9AEE5E2A_val == 2) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PrimalUltralisk", c_unitCreateIgnorePlacement, lib966DE777_gv_cCPrimaryEnemy, lv_targetLocation);
            }
            else {
            }
            lv_assaultGroup = UnitLastCreatedGroup();
            auto94CAE8DD_g = lv_assaultGroup;
            auto94CAE8DD_u = UnitGroupCount(auto94CAE8DD_g, c_unitCountAll);
            for (;; auto94CAE8DD_u -= 1) {
                auto94CAE8DD_var = UnitGroupUnitFromEnd(auto94CAE8DD_g, auto94CAE8DD_u);
                if (auto94CAE8DD_var == null) { break; }
                UnitBehaviorAdd(auto94CAE8DD_var, "CCPrecursorPrimalDrop", auto94CAE8DD_var, 1);
            }
            Wait(1.0, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZergDropPod", c_unitCreateIgnorePlacement, lib966DE777_gv_cCPrimaryEnemy, lv_targetLocation);
            UnitBehaviorAdd(UnitLastCreated(), "CCPrimalDropDummy", UnitLastCreated(), 1);
            Wait(3.0625, c_timeGame);
            auto5086A874_g = lv_assaultGroup;
            auto5086A874_u = UnitGroupCount(auto5086A874_g, c_unitCountAll);
            for (;; auto5086A874_u -= 1) {
                auto5086A874_var = UnitGroupUnitFromEnd(auto5086A874_g, auto5086A874_u);
                if (auto5086A874_var == null) { break; }
                lib966DE777_gf_CCIssueenemyorder(auto5086A874_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_baseLocation));
            }
        }

    }

    if ((lib966DE777_gf_CheckCCState("LeviDrop", lib966DE777_ge_CCCheckState_On) == true)) {
        do {
            lv_targetLocation = RegionRandomPoint(RegionCircle(lv_baseLocation, 10.0));
            lv_increment += 1;
        }while ((RegionContainsPoint(RegionCircle(lv_baseLocation, 3.0), lv_targetLocation) == false) && (lv_increment <= 100));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconAssaultPing", lv_targetLocation, ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_DA6A924E"));
        SoundPlayForPlayer(SoundLink("Leviathan_Roar", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(2.0, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HotSLeviathan", c_unitCreateIgnorePlacement, lib966DE777_gv_cCPrimaryEnemy, lv_targetLocation);
        lv_assaultGroup = UnitLastCreatedGroup();
        autoAD18BA6E_g = lv_assaultGroup;
        autoAD18BA6E_u = UnitGroupCount(autoAD18BA6E_g, c_unitCountAll);
        for (;; autoAD18BA6E_u -= 1) {
            autoAD18BA6E_var = UnitGroupUnitFromEnd(autoAD18BA6E_g, autoAD18BA6E_u);
            if (autoAD18BA6E_var == null) { break; }
            UnitBehaviorAdd(autoAD18BA6E_var, "CCLeviathanDeployStun", autoAD18BA6E_var, 1);
            UnitBehaviorAdd(autoAD18BA6E_var, "CCLeviathanBuff", autoAD18BA6E_var, 1);
        }
        Wait(3.0625, c_timeGame);
        auto64C4A45A_g = lv_assaultGroup;
        auto64C4A45A_u = UnitGroupCount(auto64C4A45A_g, c_unitCountAll);
        for (;; auto64C4A45A_u -= 1) {
            auto64C4A45A_var = UnitGroupUnitFromEnd(auto64C4A45A_g, auto64C4A45A_u);
            if (auto64C4A45A_var == null) { break; }
            UnitIssueOrder(auto64C4A45A_var, OrderSetAutoCast(AbilityCommand("HotSBioPlasmidDischarge", 0), true), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            AISetUnitScriptControlled(auto64C4A45A_var, false);
            lib966DE777_gf_CCIssueenemyorder(auto64C4A45A_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_baseLocation));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCZergAssault_Init () {
    lib966DE777_gt_CCZergAssault = TriggerCreate("lib966DE777_gt_CCZergAssault_Func");
    TriggerAddEventTimer(lib966DE777_gt_CCZergAssault, lib966DE777_gv_cCZergAssaultTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Climate Toggle
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCClimateToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((lib966DE777_gv_cC_GameStart == 1) && (libNtve_gf_PlayerInCinematicMode(1) == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((lib966DE777_gv_cCClimateToggleState == 0)) {
        TimerWindowSetTitle(lib966DE777_gv_cCClimateTimerWindow, StringExternal("Param/Value/lib_966DE777_86C6C902"));
        TimerWindowShow(lib966DE777_gv_cCClimateTimerWindow, PlayerGroupAll(), false);
        TimerWindowShow(lib966DE777_gv_cCClimateTimerWindow, PlayerGroupAll(), true);
        lib966DE777_gv_cCClimateToggleState = 1;
        lib966DE777_gf_CCClimateSetLighting();
        UserDataSetInt("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "ToggleState", 1, lib966DE777_gv_cCClimateToggleState);
        lib966DE777_gf_MassApplyCCClimateUpgrades();
        lib966DE777_gf_MassApplyCCClimateBehavior("Great Silence", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassApplyCCClimateBehavior("FlashFreeze", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassApplyCCClimateBehavior("ScorchSun", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassApplyCCClimateBehavior("AntiGravity", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassApplyCCClimateBehavior("GammaStorm", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassApplyCCClimateBehavior("BlackUnit", null, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_All);
        TimerStart(lib966DE777_gv_cCClimateTimer, lib966DE777_gv_cCClimateDuration, false, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (UserDataGetText("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Name", 1) + StringExternal("Param/Value/lib_966DE777_87F5E373") + UserDataGetText("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "Description", 1)));
        SoundPlayForPlayer(SoundLink("THanson02MusicEventA", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        TimerWindowSetTitle(lib966DE777_gv_cCClimateTimerWindow, StringExternal("Param/Value/lib_966DE777_49B80405"));
        lib966DE777_gv_cCClimateToggleState = 0;
        lib966DE777_gf_MassRemoveCCClimateUpgrades();
        lib966DE777_gf_MassRemoveCCClimateBehavior("Great Silence", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassRemoveCCClimateBehavior("FlashFreeze", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassRemoveCCClimateBehavior("ScorchSun", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassRemoveCCClimateBehavior("AntiGravity", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassRemoveCCClimateBehavior("GammaStorm", null, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player);
        lib966DE777_gf_MassRemoveCCClimateBehavior("BlackUnit", null, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_All);
        UserDataSetInt("CCWeatherConditions", lib966DE777_gv_currentCCClimate, "ToggleState", 1, lib966DE777_gv_cCClimateToggleState);
        if ((lib966DE777_gf_CheckCCState("ClimateChaos", lib966DE777_ge_CCCheckState_On) == true)) {
            lib966DE777_gf_ChaoticEraRandomizeClimate();
        }

        TimerStart(lib966DE777_gv_cCClimateTimer, lib966DE777_gv_cCClimateCooldown, false, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_6504E548"));
        SoundPlayForPlayer(SoundLink("THanson02MusicEventB", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((lib966DE777_gv_cCAllowLightingChange == true)) {
            GameSetLighting(lib966DE777_gv_cCDefaultLighting, 5.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCClimateToggle_Init () {
    lib966DE777_gt_CCClimateToggle = TriggerCreate("lib966DE777_gt_CCClimateToggle_Func");
    TriggerAddEventTimer(lib966DE777_gt_CCClimateToggle, lib966DE777_gv_cCClimateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Helium Flash
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCHeliumFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(EventPlayer(), RegionEntireMap(), 30.0, false);
    SoundPlayForPlayer(SoundLink("Hybrid_PlasmaBlastCharge", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    if ((lib966DE777_gv_cCAllowLightingChange == true)) {
        GameSetLighting("CutsceneFadeFromWhiteflash", 1.5);
    }
    else {
        CinematicFade(false, 1.5, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    }
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Terran_ExplosionLarge", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    Wait(0.0625, c_timeGame);
    SoundPlayForPlayer(SoundLink("Protoss_ExplosionLarge", -1), c_maxPlayers, PlayerGroupAll(), 200.0, 0.0);
    if ((lib966DE777_gv_cCAllowLightingChange == true)) {
        GameSetLighting("CCHflash", 0.3);
    }
    else {
        CinematicFade(true, 3.0, c_fadeStyleNormal, Color(100.00, 100.00, 100.00), 0.0, true);
    }
    if ((lib966DE777_gv_cCClimateToggleState == 1)) {
        TimerStart(lib966DE777_gv_cCClimateTimer, 0.0625, false, c_timeGame);
    }
    else {
        if ((lib966DE777_gv_cCAllowLightingChange == true)) {
            GameSetLighting(lib966DE777_gv_cCDefaultLighting, 5.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCHeliumFlash_Init () {
    lib966DE777_gt_CCHeliumFlash = TriggerCreate("lib966DE777_gt_CCHeliumFlash_Func");
    TriggerAddEventPlayerEffectUsed(lib966DE777_gt_CCHeliumFlash, c_playerAny, "HeliumFlashCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Ion Cannon
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCIonCannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_ionCannonCharges[EventPlayer()] > 0))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), EventPlayer(), false);
    UnitCreateEffectUnit(lib966DE777_gv_cCTopbarUnit[EventPlayer()], "CCIonCannonDamage", EventUnit());
    SoundPlayForPlayer(SoundLink("SOABomberModeTarget_Select_Layer", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 200.0, 0.0);
    lib966DE777_gv_ionCannonCharges[EventPlayer()] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCIonCannon_Init () {
    lib966DE777_gt_CCIonCannon = TriggerCreate("lib966DE777_gt_CCIonCannon_Func");
    TriggerAddEventUnitSelected(lib966DE777_gt_CCIonCannon, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Arm Ion Cannon
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCArmIonCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ionCannonBar;
    fixed lv_timer;

    // Automatic Variable Declarations
    unitgroup auto1DCCB86E_g;
    int auto1DCCB86E_u;
    unit auto1DCCB86E_var;

    // Variable Initialization
    lv_ionCannonBar = (30 + EventPlayer());
    lv_timer = 15.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gv_ionCannonCharges[EventPlayer()] = lib966DE777_gv_ionCannonMaxCharge;
    SoundPlayForPlayer(SoundLink("SOABomberModeTarget_Select_Layer", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 200.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_SOA_calldown_on2", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 200.0, 0.0);
    if ((UnitFilterMatch(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        auto1DCCB86E_g = UnitGroupSelected(EventPlayer());
        auto1DCCB86E_u = UnitGroupCount(auto1DCCB86E_g, c_unitCountAll);
        for (;; auto1DCCB86E_u -= 1) {
            auto1DCCB86E_var = UnitGroupUnitFromEnd(auto1DCCB86E_g, auto1DCCB86E_u);
            if (auto1DCCB86E_var == null) { break; }
            UnitSelect(auto1DCCB86E_var, EventPlayer(), false);
        }
    }

    do {
        Wait(0.0625, c_timeGame);
        lv_timer -= 0.0625;
        libNtve_gf_DisplayBossBar(lv_ionCannonBar, "Assets\\Textures\\btn-upgrade-mengsk-engineeringbay-orbitaldrop.dds", (StringExternal("Param/Value/lib_966DE777_AC618F45") + FixedToText(lv_timer, 1) + StringExternal("Param/Value/lib_966DE777_322D0B04")), lib966DE777_gv_ionCannonMaxCharge, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetBossBarRace(lv_ionCannonBar, libNtve_ge_BossBarRace_Terran, true);
        libNtve_gf_SetBossBarCurrentValue(lv_ionCannonBar, lib966DE777_gv_ionCannonCharges[EventPlayer()], true);
    }while ((lib966DE777_gv_ionCannonCharges[EventPlayer()] > 0) && (lv_timer > 0));
    libNtve_gf_ShowHideBossBar(false, lv_ionCannonBar);
    lib966DE777_gv_ionCannonCharges[EventPlayer()] = 0;
    UnitBehaviorRemove(lib966DE777_gv_cCTopbarUnit[EventPlayer()], "CCIonCannonArmed", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCArmIonCannon_Init () {
    lib966DE777_gt_CCArmIonCannon = TriggerCreate("lib966DE777_gt_CCArmIonCannon_Func");
    TriggerAddEventUnitAbility(lib966DE777_gt_CCArmIonCannon, null, AbilityCommand("CCIonCannon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Screen Flip
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCScreenFlip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_duration;
    int lv_roll;

    // Automatic Variable Declarations
    playergroup auto6408BF2B_g;
    int auto6408BF2B_var;
    playergroup auto6F79978C_g;
    int auto6F79978C_var;

    // Variable Initialization
    lv_duration = RandomInt(16, 56);
    lv_roll = (RandomInt(0, 120) + 120);

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayForPlayer(SoundLink("CCScreenFlip", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto6408BF2B_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
    auto6408BF2B_var = -1;
    while (true) {
        auto6408BF2B_var = PlayerGroupNextPlayer(auto6408BF2B_g, auto6408BF2B_var);
        if (auto6408BF2B_var < 0) { break; }
        CameraSetValue(auto6408BF2B_var, c_cameraValueRoll, lv_roll, 1.5, -1, 10.0);
    }
    do {
        Wait(0.25, c_timeGame);
        lv_duration -= 1;
    }while ((lib966DE777_gv_cC_GameStart == 1) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_duration > 0));
    SoundPlayForPlayer(SoundLink("CCScreenFlip", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto6F79978C_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
    auto6F79978C_var = -1;
    while (true) {
        auto6F79978C_var = PlayerGroupNextPlayer(auto6F79978C_g, auto6F79978C_var);
        if (auto6F79978C_var < 0) { break; }
        CameraSetValue(auto6F79978C_var, c_cameraValueRoll, 0.0, 1.5, -1, 10.0);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCScreenFlip_Init () {
    lib966DE777_gt_CCScreenFlip = TriggerCreate("lib966DE777_gt_CCScreenFlip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Solarite Bombardment
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_SolariteBombardment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetUnitPoint;
    point lv_targetPoint;
    int lv_solaritesRemaining;

    // Automatic Variable Declarations
    playergroup autoD16451A1_g;
    int autoD16451A1_var;

    // Variable Initialization
    lv_solaritesRemaining = RandomInt(15, 30);

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gf_CheckCCState("Solarite", lib966DE777_ge_CCCheckState_On) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD16451A1_g = lib966DE777_gv_cCPlayerSide;
    autoD16451A1_var = -1;
    while (true) {
        autoD16451A1_var = PlayerGroupNextPlayer(autoD16451A1_g, autoD16451A1_var);
        if (autoD16451A1_var < 0) { break; }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_35E60399"));
        SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 100.0, 0.0);
        lv_solaritesRemaining = RandomInt(15, 30);
        lv_targetUnitPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, autoD16451A1_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        MinimapPing(lib966DE777_gv_cCPlayerSide, lv_targetUnitPoint, 3.0, Color(100.00, 100.00, 0.00));
        while ((lv_solaritesRemaining > 0)) {
            lv_targetPoint = RegionRandomPoint(RegionCircle(lv_targetUnitPoint, 9.0));
            libNtve_gf_CreateUnitsAtPoint2(1, "VolatileSolarite", c_unitCreateIgnorePlacement, autoD16451A1_var, lv_targetPoint);
            UnitSetHeight(UnitLastCreated(), 15.0, 0.0);
            UnitSetHeight(UnitLastCreated(), 0.0, 3.0);
            lv_solaritesRemaining -= 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_SolariteBombardment_Init () {
    lib966DE777_gt_SolariteBombardment = TriggerCreate("lib966DE777_gt_SolariteBombardment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guided Nuke
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_GuidedNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    playergroup autoE42E5CE0_g;
    int autoE42E5CE0_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gf_CheckCCState("Nuke_follow", lib966DE777_ge_CCCheckState_On) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE42E5CE0_g = lib966DE777_gv_cCPlayerSide;
    autoE42E5CE0_var = -1;
    while (true) {
        autoE42E5CE0_var = PlayerGroupNextPlayer(autoE42E5CE0_g, autoE42E5CE0_var);
        if (autoE42E5CE0_var < 0) { break; }
        lv_targetUnit = UnitGroupRandomUnit(UnitGroup(null, autoE42E5CE0_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        MinimapPing(lib966DE777_gv_cCPlayerSide, UnitGetPosition(lv_targetUnit), 3.0, Color(100.00, 100.00, 0.00));
        SoundPlayForPlayer(SoundLink("Ghost_NukeLaunch", -1), c_maxPlayers, lib966DE777_gv_cCPlayerSide, 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_966DE777_17DABB1B"));
        lib966DE777_gf_GuidedNukeFollow(lv_targetUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_GuidedNuke_Init () {
    lib966DE777_gt_GuidedNuke = TriggerCreate("lib966DE777_gt_GuidedNuke_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Reloads Game
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_PlayerReloadsGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC3D770CC_g;
    int autoC3D770CC_var;

    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_CCInitializePlayerSettings();
    if ((lib966DE777_gf_CheckCCState("BadLoad", lib966DE777_ge_CCCheckState_On) == true)) {
        autoC3D770CC_g = lib966DE777_gv_cCPlayerSide;
        autoC3D770CC_var = -1;
        while (true) {
            autoC3D770CC_var = PlayerGroupNextPlayer(autoC3D770CC_g, autoC3D770CC_var);
            if (autoC3D770CC_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoC3D770CC_var, "CCUltramarineOrbStacks", 1);
            UIDisplayMessage(PlayerGroupSingle(autoC3D770CC_var), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_966DE777_C12F7DC1") + IntToText(TechTreeUpgradeCount(autoC3D770CC_var, "CCUltramarineOrbStacks", c_techCountCompleteOnly)) + StringExternal("Param/Value/lib_966DE777_DB228F70")));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_PlayerReloadsGame_Init () {
    lib966DE777_gt_PlayerReloadsGame = TriggerCreate("lib966DE777_gt_PlayerReloadsGame_Func");
    TriggerAddEventLoadGameDone(lib966DE777_gt_PlayerReloadsGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Initial Behaviors/Abilities
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCInitialBehaviorsAbilities_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto31858B25_g;
    int auto31858B25_u;
    unit auto31858B25_var;
    playergroup auto5CF66018_g;
    int auto5CF66018_var;
    unitgroup auto16AA3EBF_g;
    int auto16AA3EBF_u;
    unit auto16AA3EBF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto31858B25_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto31858B25_u = UnitGroupCount(auto31858B25_g, c_unitCountAll);
    for (;; auto31858B25_u -= 1) {
        auto31858B25_var = UnitGroupUnitFromEnd(auto31858B25_g, auto31858B25_u);
        if (auto31858B25_var == null) { break; }
        if ((lib966DE777_gv_cCRandomizerActive == true) && (PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), UnitGetOwner(auto31858B25_var)) == true)) {
            lib966DE777_gf_CCApplyRandomizetoUnit(auto31858B25_var);
        }

        lib966DE777_gf_CCProcessUnitBehaviorsAbilities(auto31858B25_var, false);
    }
    lib966DE777_gf_CreateCCTopbarAbility("Bullettime", null);
    lib966DE777_gf_CreateCCTopbarAbility("InstSalvage", null);
    lib966DE777_gf_CreateCCTopbarAbility("Calldown Hyperion", null);
    lib966DE777_gf_CreateCCTopbarAbility("Calldown Odin", null);
    lib966DE777_gf_CreateCCTopbarAbility("VoidDomain", null);
    lib966DE777_gf_CreateCCTopbarAbility("Hflash", null);
    lib966DE777_gf_CreateCCTopbarAbility("IonCannon", null);
    if ((lib966DE777_gf_CheckCCState("BurrowAmbush", lib966DE777_ge_CCCheckState_On) == true)) {
        auto5CF66018_g = lib966DE777_gv_cCEnemySide;
        auto5CF66018_var = -1;
        while (true) {
            auto5CF66018_var = PlayerGroupNextPlayer(auto5CF66018_g, auto5CF66018_var);
            if (auto5CF66018_var < 0) { break; }
            auto16AA3EBF_g = UnitGroup(null, auto5CF66018_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto16AA3EBF_u = UnitGroupCount(auto16AA3EBF_g, c_unitCountAll);
            for (;; auto16AA3EBF_u -= 1) {
                auto16AA3EBF_var = UnitGroupUnitFromEnd(auto16AA3EBF_g, auto16AA3EBF_u);
                if (auto16AA3EBF_var == null) { break; }
                lib966DE777_gf_CCorderunittoburrow(auto16AA3EBF_var);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCInitialBehaviorsAbilities_Init () {
    lib966DE777_gt_CCInitialBehaviorsAbilities = TriggerCreate("lib966DE777_gt_CCInitialBehaviorsAbilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Initial Behaviors/Abilities (Old Deprecated)
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCInitialBehaviorsAbilitiesOldDeprecated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C78E869_g;
    int auto2C78E869_var;
    unitgroup autoC3B04342_g;
    int autoC3B04342_u;
    unit autoC3B04342_var;
    playergroup auto2A2AE9CF_g;
    int auto2A2AE9CF_var;
    unitgroup auto7100553C_g;
    int auto7100553C_u;
    unit auto7100553C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib966DE777_gv_cCRandomizerActive == true)) {
        auto2C78E869_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
        auto2C78E869_var = -1;
        while (true) {
            auto2C78E869_var = PlayerGroupNextPlayer(auto2C78E869_g, auto2C78E869_var);
            if (auto2C78E869_var < 0) { break; }
            autoC3B04342_g = UnitGroup(null, auto2C78E869_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            autoC3B04342_u = UnitGroupCount(autoC3B04342_g, c_unitCountAll);
            for (;; autoC3B04342_u -= 1) {
                autoC3B04342_var = UnitGroupUnitFromEnd(autoC3B04342_g, autoC3B04342_u);
                if (autoC3B04342_var == null) { break; }
                lib966DE777_gf_CCApplyRandomizetoUnit(autoC3B04342_var);
            }
        }
    }

    lib966DE777_gf_MassApplyCCBehavior("Enemy_Atk 2", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("Enemy_Atk 3", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("HPdown2", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("HPdown3", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("TimedVirus", null, null, UnitFilter(0, 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("BlackUnit", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Both, false);
    lib966DE777_gf_MassApplyCCBehavior("NetherCreep", null, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("BlackCrown", null, null, UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("Enemyfast", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("Pacifist 5", "PacifismPlayerIdentifier", null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive, false);
    lib966DE777_gf_MassApplyCCBehavior("Pacifist 5", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("Enemy_HP 2", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("Enemy_HP 3", null, null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("King Aspd", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("Gold Chalice", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("BurrowAmbush", null, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Enemy, false);
    lib966DE777_gf_MassApplyCCBehavior("InfEnergy", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("InfEnergy", "HandofInfinityVictim", null, UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_EnemyExclusive, false);
    lib966DE777_gf_MassApplyCCBehavior("KineticBoost", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("Surviver Pact", null, null, lib966DE777_gv_cCDefaultFilter, lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCBehavior("Chrono CWAL", null, null, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCAbility("Laevateinn", null, null, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCAbility("Booster", null, null, UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_MassApplyCCAbility("Sandevistan", null, null, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), lib966DE777_ge_CCforEnemyorPlayer_Player, false);
    lib966DE777_gf_CreateCCTopbarAbility("Bullettime", null);
    lib966DE777_gf_CreateCCTopbarAbility("InstSalvage", null);
    lib966DE777_gf_CreateCCTopbarAbility("Calldown Hyperion", null);
    lib966DE777_gf_CreateCCTopbarAbility("Calldown Odin", null);
    lib966DE777_gf_CreateCCTopbarAbility("VoidDomain", null);
    if ((lib966DE777_gf_CheckCCState("BurrowAmbush", lib966DE777_ge_CCCheckState_On) == true)) {
        auto2A2AE9CF_g = lib966DE777_gv_cCEnemySide;
        auto2A2AE9CF_var = -1;
        while (true) {
            auto2A2AE9CF_var = PlayerGroupNextPlayer(auto2A2AE9CF_g, auto2A2AE9CF_var);
            if (auto2A2AE9CF_var < 0) { break; }
            auto7100553C_g = UnitGroup(null, auto2A2AE9CF_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
            auto7100553C_u = UnitGroupCount(auto7100553C_g, c_unitCountAll);
            for (;; auto7100553C_u -= 1) {
                auto7100553C_var = UnitGroupUnitFromEnd(auto7100553C_g, auto7100553C_u);
                if (auto7100553C_var == null) { break; }
                lib966DE777_gf_CCorderunittoburrow(auto7100553C_var);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCInitialBehaviorsAbilitiesOldDeprecated_Init () {
    lib966DE777_gt_CCInitialBehaviorsAbilitiesOldDeprecated = TriggerCreate("lib966DE777_gt_CCInitialBehaviorsAbilitiesOldDeprecated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Initial Others
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCInitialOthers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA0207158_g;
    int autoA0207158_var;
    playergroup auto8A790F7A_g;
    int auto8A790F7A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA0207158_g = lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive);
    autoA0207158_var = -1;
    while (true) {
        autoA0207158_var = PlayerGroupNextPlayer(autoA0207158_g, autoA0207158_var);
        if (autoA0207158_var < 0) { break; }
        if ((lib966DE777_gf_CheckCCState("Supply_Down", lib966DE777_ge_CCCheckState_On) == true)) {
            PlayerModifyPropertyInt(autoA0207158_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 100);
        }

    }
    auto8A790F7A_g = lib966DE777_gv_cCPlayerSide;
    auto8A790F7A_var = -1;
    while (true) {
        auto8A790F7A_var = PlayerGroupNextPlayer(auto8A790F7A_g, auto8A790F7A_var);
        if (auto8A790F7A_var < 0) { break; }
        if ((lib966DE777_gf_CheckCCState("Dec_ATKup", lib966DE777_ge_CCCheckState_On) == true)) {
            PlayerModifyPropertyInt(auto8A790F7A_var, c_playerPropDamageDealtPercent, c_playerPropOperAdd, 100);
        }

        if ((lib966DE777_gf_CheckCCState("Dec_HPup", lib966DE777_ge_CCCheckState_On) == true)) {
            PlayerModifyPropertyInt(auto8A790F7A_var, c_playerPropHandicap, c_playerPropOperAdd, 100);
        }

        if ((lib966DE777_gf_CheckCCState("Dec_StartResource", lib966DE777_ge_CCCheckState_On) == true)) {
            PlayerModifyPropertyInt(auto8A790F7A_var, c_playerPropMinerals, c_playerPropOperAdd, 4000);
            PlayerModifyPropertyInt(auto8A790F7A_var, c_playerPropVespene, c_playerPropOperAdd, 1000);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCInitialOthers_Init () {
    lib966DE777_gt_CCInitialOthers = TriggerCreate("lib966DE777_gt_CCInitialOthers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Unit Takes Damage
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCUnitTakesDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAttempted() > 0.0))) {
            return false;
        }

        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(lib966DE777_gv_cCPlayerSide, EventUnitDamageSourcePlayer()) == true) && (PlayerGroupHasPlayer(lib966DE777_gv_cCEnemySide, EventPlayer()) == true)) {
        if ((lib966DE777_gv_retaliateSolarLance == true)) {
            lib966DE777_gf_RetaliateSolarLance(EventUnitDamageSourceUnit(), EventUnit(), EventPlayer(), EventUnitDamageSourcePlayer());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCUnitTakesDamage_Init () {
    lib966DE777_gt_CCUnitTakesDamage = TriggerCreate("lib966DE777_gt_CCUnitTakesDamage_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_CCUnitTakesDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Remove Unit
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCRemoveUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCRemoveUnit_Init () {
    lib966DE777_gt_CCRemoveUnit = TriggerCreate("lib966DE777_gt_CCRemoveUnit_Func");
    TriggerAddEventUnitDamaged(lib966DE777_gt_CCRemoveUnit, null, c_unitDamageTypeAny, c_unitDamageEither, "CCRemoveUnitSource");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Process New Unit 
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCProcessNewUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitCreatedBehavior() != "Sandevistan"))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_CCProcessUnitBehaviorsAbilities(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCProcessNewUnit_Init () {
    lib966DE777_gt_CCProcessNewUnit = TriggerCreate("lib966DE777_gt_CCProcessNewUnit_Func");
    TriggerEnable(lib966DE777_gt_CCProcessNewUnit, false);
    TriggerAddEventUnitCreated(lib966DE777_gt_CCProcessNewUnit, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Process New Unit (no ability)
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCProcessNewUnitnoability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitCreatedBehavior() == null))) {
            return false;
        }

        if (!((EventUnitCreatedAbil() == null))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib966DE777_gv_cCRandomizerActive == true) && (PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), UnitGetOwner(EventUnitCreatedUnit())) == true)) {
        lib966DE777_gf_CCApplyRandomizetoUnit(EventUnitCreatedUnit());
    }

    if ((lib966DE777_gv_cCPlayerFactionIndex != 0)) {
        lib966DE777_gf_CCFactionSwapUnit(EventUnitCreatedUnit(), lib966DE777_gv_cCPlayerFactionIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCProcessNewUnitnoability_Init () {
    lib966DE777_gt_CCProcessNewUnitnoability = TriggerCreate("lib966DE777_gt_CCProcessNewUnitnoability_Func");
    TriggerEnable(lib966DE777_gt_CCProcessNewUnitnoability, false);
    TriggerAddEventUnitCreated(lib966DE777_gt_CCProcessNewUnitnoability, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Process New Unit (training finish)
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCProcessNewUnittrainingfinish_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib966DE777_gv_cCRandomizerActive == true) && (PlayerGroupHasPlayer(lib966DE777_gf_GetCCTargetPlayerGroup(lib966DE777_ge_CCforEnemyorPlayer_PlayerExclusive), UnitGetOwner(EventUnitProgressUnit())) == true)) {
        lib966DE777_gf_CCApplyRandomizetoUnit(EventUnitProgressUnit());
    }

    if ((lib966DE777_gv_cCPlayerFactionIndex != 0)) {
        lib966DE777_gf_CCFactionSwapUnit(EventUnitProgressUnit(), lib966DE777_gv_cCPlayerFactionIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCProcessNewUnittrainingfinish_Init () {
    lib966DE777_gt_CCProcessNewUnittrainingfinish = TriggerCreate("lib966DE777_gt_CCProcessNewUnittrainingfinish_Func");
    TriggerEnable(lib966DE777_gt_CCProcessNewUnittrainingfinish, false);
    TriggerAddEventUnitTrainProgress(lib966DE777_gt_CCProcessNewUnittrainingfinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Increment Tick (0,25s)
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCIncrementTick025s_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib966DE777_gv_cCGamePaused == false))) {
            return false;
        }

        if (!((lib966DE777_gv_cC_GameStart == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gv_cCTick025seconds += 1;
    if ((lib966DE777_gv_cCTick025seconds >= 100)) {
        if ((ModI(lib966DE777_gv_cCTick025seconds, 240) == 0) && (lib966DE777_gf_CheckCCState("Collapsal", lib966DE777_ge_CCCheckState_On) == true)) {
            TriggerExecute(lib966DE777_gt_ApplyCollapseManifestation, true, false);
        }

        if ((ModI(lib966DE777_gv_cCTick025seconds, 160) == 0) && (lib966DE777_gf_CheckCCState("Nuke_follow", lib966DE777_ge_CCCheckState_On) == true)) {
            TriggerExecute(lib966DE777_gt_GuidedNuke, true, false);
        }

        if ((ModI(lib966DE777_gv_cCTick025seconds, 120) == 0) && (lib966DE777_gf_CheckCCState("Solarite", lib966DE777_ge_CCCheckState_On) == true)) {
            TriggerExecute(lib966DE777_gt_SolariteBombardment, true, false);
        }

        if ((ModI(lib966DE777_gv_cCTick025seconds, 240) == 0)) {
            lib966DE777_gf_CCAtkDownUpdate();
        }

    }

    if ((lib966DE777_gf_CheckCCState("Gold Chalice", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gf_GoldenChaliceUpdate();
    }

    if ((lib966DE777_gf_CheckCCState("ResourcePickup", lib966DE777_ge_CCCheckState_On) == true) && (RandomInt(1, 50) == 1)) {
        lib966DE777_gf_SpawnResourcePickup();
    }

    if ((lib966DE777_gf_CheckCCState("ScreenFlip", lib966DE777_ge_CCCheckState_On) == true) && (RandomInt(1, 40) == 1)) {
        TriggerExecute(lib966DE777_gt_CCScreenFlip, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCIncrementTick025s_Init () {
    lib966DE777_gt_CCIncrementTick025s = TriggerCreate("lib966DE777_gt_CCIncrementTick025s_Func");
    TriggerEnable(lib966DE777_gt_CCIncrementTick025s, false);
    TriggerAddEventTimePeriodic(lib966DE777_gt_CCIncrementTick025s, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize CC Menu
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_InitializeCCMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1800, 1100, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    lib966DE777_gv_cCDialogue = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/lib_966DE777_005CA644"));
    lib966DE777_gf_CCIterateChecks();
    lib966DE777_gf_CreateCCDialogueStats();
    lib966DE777_gf_PopulateClassbtns();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 100, c_anchorTop, 0, 1050, StringToText(""), lib966DE777_gv_cCStartGameTxt, "");
    lib966DE777_gv_cCStartBtn = DialogControlLastCreated();
    lib966DE777_gf_CheckCCStartCondition();
    DialogSetVisible(lib966DE777_gv_cCDialogue, PlayerGroupAll(), true);
    lib966DE777_gf_CCPauseUnpauseGame(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_InitializeCCMenu_Init () {
    lib966DE777_gt_InitializeCCMenu = TriggerCreate("lib966DE777_gt_InitializeCCMenu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Start Game
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCStartGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib966DE777_gf_CCPauseUnpauseGame(false);
    lib966DE777_gf_CCInitializePlayerSettings();
    lib966DE777_gv_cC_GameStart = 1;
    lib966DE777_gv_mapTerrain = GameTerrainSet();
    lib966DE777_gv_cCDefaultLighting = (CatalogFieldValueGet(c_gameCatalogTerrain, lib966DE777_gv_mapTerrain, "Lighting", c_playerAny));
    TriggerSendEvent("CCStartPriorityAction");
    Wait(0.0625, c_timeGame);
    if ((lib966DE777_gf_CheckCCState("Resource drain", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gf_StartResourceDrainTimer();
    }

    if ((lib966DE777_gf_CheckCCState("Solar Lance", lib966DE777_ge_CCCheckState_On) == true)) {
        lib966DE777_gv_retaliateSolarLance = true;
    }

    lib966DE777_gf_CCRandomizerStart();
    lib966DE777_gf_CCSetAttackWaveMultipliers();
    lib966DE777_gf_MassApplyCCUpgrades(false);
    lib966DE777_gf_CCFactionSwapPlayerStart();
    lib966DE777_gf_CCProductionBanStart();
    TriggerEnable(lib966DE777_gt_CCIncrementTick025s, true);
    TriggerEnable(lib966DE777_gt_CCProcessNewUnit, true);
    TriggerEnable(lib966DE777_gt_CCProcessNewUnitnoability, true);
    TriggerEnable(lib966DE777_gt_CCProcessNewUnittrainingfinish, true);
    TriggerExecute(lib966DE777_gt_CCInitialBehaviorsAbilities, true, true);
    TriggerExecute(lib966DE777_gt_CCInitialOthers, true, true);
    TriggerSendEvent("CCGameStart");
    DialogSetVisible(lib966DE777_gv_cCDialogue, PlayerGroupAll(), false);
    lib966DE777_gf_CCDeathlessCreateObjectives();
    lib966DE777_gf_CCStartZergAssaultTimer();
    lib966DE777_gf_InitializeCCClimate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCStartGame_Init () {
    lib966DE777_gt_CCStartGame = TriggerCreate("lib966DE777_gt_CCStartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Start Game Priority Actions
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCStartGamePriorityActions_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCStartGamePriorityActions_Init () {
    lib966DE777_gt_CCStartGamePriorityActions = TriggerCreate("lib966DE777_gt_CCStartGamePriorityActions_Func");
    lib966DE777_gf_CCStartPriorityAction(lib966DE777_gt_CCStartGamePriorityActions);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Dialogue Button Click
//--------------------------------------------------------------------------------------------------
bool lib966DE777_gt_CCDialogueButtonClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemnum;

    // Automatic Variable Declarations
    const int autoEC544B93_ae = 10;
    const int autoEC544B93_ai = 1;
    const int auto4FE5D444_ae = 70;
    const int auto4FE5D444_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == lib966DE777_gv_cCDialogue))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib966DE777_gv_cCStartBtn)) {
        TriggerExecute(lib966DE777_gt_CCStartGame, true, false);
        return true;
    }

    lv_itemnum = 1;
    for ( ; ( (autoEC544B93_ai >= 0 && lv_itemnum <= autoEC544B93_ae) || (autoEC544B93_ai < 0 && lv_itemnum >= autoEC544B93_ae) ) ; lv_itemnum += autoEC544B93_ai ) {
        if ((EventDialogControl() == lib966DE777_gv_cCClassBtn[lv_itemnum])) {
            lib966DE777_gv_cCCurrentClass = lv_itemnum;
            lib966DE777_gf_ClearContractBtns();
            lib966DE777_gf_PopulateContractbtns(UserDataInstance("ContingencyContractClasses", lib966DE777_gv_cCCurrentClass), lib966DE777_gv_cCCurrentClass);
            return true;
        }

    }
    lv_itemnum = 1;
    for ( ; ( (auto4FE5D444_ai >= 0 && lv_itemnum <= auto4FE5D444_ae) || (auto4FE5D444_ai < 0 && lv_itemnum >= auto4FE5D444_ae) ) ; lv_itemnum += auto4FE5D444_ai ) {
        if ((EventDialogControl() == lib966DE777_gv_cCContractBtn[lib966DE777_gv_cCCurrentClass][lv_itemnum])) {
            lib966DE777_gf_ToggleContract(lib966DE777_gv_cCContractList[lib966DE777_gv_cCCurrentClass][lv_itemnum]);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib966DE777_gt_CCDialogueButtonClick_Init () {
    lib966DE777_gt_CCDialogueButtonClick = TriggerCreate("lib966DE777_gt_CCDialogueButtonClick_Func");
    TriggerAddEventDialogControl(lib966DE777_gt_CCDialogueButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void lib966DE777_InitTriggers () {
    lib966DE777_gt_FactionSwapPlayerUnit_Init();
    lib966DE777_gt_fatal_Init();
    lib966DE777_gt_random_Init();
    lib966DE777_gt_ccdebug_Init();
    lib966DE777_gt_ccmenu_Init();
    lib966DE777_gt_bonuscomplete_Init();
    lib966DE777_gt_cctopbar_Init();
    lib966DE777_gt_raceswap_Init();
    lib966DE777_gt_AllBonusObjectiveComplete_Init();
    lib966DE777_gt_RandomizeGroundUnit_Init();
    lib966DE777_gt_RandomizeAirUnit_Init();
    lib966DE777_gt_CCProductionBanActivate_Init();
    lib966DE777_gt_CreateCCTopbar_Init();
    lib966DE777_gt_TopbarAbilityBulletTime_Init();
    lib966DE777_gt_TopbarAbilitySalvage_Init();
    lib966DE777_gt_ResourceDrain_Init();
    lib966DE777_gt_ApplyCollapseManifestation_Init();
    lib966DE777_gt_SurviversPactVeteran_Init();
    lib966DE777_gt_SurviversPactElite_Init();
    lib966DE777_gt_SurviversPactAce_Init();
    lib966DE777_gt_UnitDeathTally_Init();
    lib966DE777_gt_CCZergAssault_Init();
    lib966DE777_gt_CCClimateToggle_Init();
    lib966DE777_gt_CCHeliumFlash_Init();
    lib966DE777_gt_CCIonCannon_Init();
    lib966DE777_gt_CCArmIonCannon_Init();
    lib966DE777_gt_CCScreenFlip_Init();
    lib966DE777_gt_SolariteBombardment_Init();
    lib966DE777_gt_GuidedNuke_Init();
    lib966DE777_gt_PlayerReloadsGame_Init();
    lib966DE777_gt_CCInitialBehaviorsAbilities_Init();
    lib966DE777_gt_CCInitialBehaviorsAbilitiesOldDeprecated_Init();
    lib966DE777_gt_CCInitialOthers_Init();
    lib966DE777_gt_CCUnitTakesDamage_Init();
    lib966DE777_gt_CCRemoveUnit_Init();
    lib966DE777_gt_CCProcessNewUnit_Init();
    lib966DE777_gt_CCProcessNewUnitnoability_Init();
    lib966DE777_gt_CCProcessNewUnittrainingfinish_Init();
    lib966DE777_gt_CCIncrementTick025s_Init();
    lib966DE777_gt_InitializeCCMenu_Init();
    lib966DE777_gt_CCStartGame_Init();
    lib966DE777_gt_CCStartGamePriorityActions_Init();
    lib966DE777_gt_CCDialogueButtonClick_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib966DE777_InitLib_completed = false;

void lib966DE777_InitLib () {
    if (lib966DE777_InitLib_completed) {
        return;
    }

    lib966DE777_InitLib_completed = true;

    lib966DE777_InitLibraries();
    lib966DE777_InitVariables();
    lib966DE777_InitTriggers();
}

